--**REFUERZO UNIDAD 8**--
--1.	Crea un procedimiento que a través del parámetro DEPT_NO de un departamento muestre: el número de departamento, 
--su nombre y su localidad, así como el número de empleados que trabajan en ese departamento. Gestiona excepciones.

CREATE OR REPLACE PROCEDURE MUESTRA_DEPTO (NUM NUMBER)
AS
 DEPTO NUMBER(3); --HAY QUE PONER PUNTO Y COMA! Y NO COMA PARA DECLARAR LAS VARIABLES.
 NOMBRE VARCHAR2(30); 
 LUGAR VARCHAR2(30); 
 TOTAL NUMBER(4);
BEGIN
 SELECT D.DEPT_NO, DNOMBRE, LOC, COUNT(*) TOTAL INTO DEPTO, NOMBRE, LUGAR, TOTAL FROM DEPART D, EMPLE E 
WHERE D.DEPT_NO = NUM
AND D.DEPT_NO = E.DEPT_NO
GROUP BY D.DEPT_NO, DNOMBRE, LOC;

DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO es: '||DEPTO||' '||NOMBRE||' '||LUGAR||' '||TOTAL);
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO NO ENCONTRADO');
END;


--OTRA VERSION
CREATE OR REPLACE PROCEDURE EJER1 (NUMDEPT NUMBER)
AS 
V_REG DEPART%TYPE;
NUMEMPLE NUMBER(2);

BEGIN
SELECT * INTO V_REG FROM DEPART WHERE DEPT_NO = NUMDEPT;
SELECT COUNT(*) INTO NUMEMPLE FROM EMPLE WHERE DEPT_NO=NUMDEPT;
DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO es: '||V_REG.DEPT_NO||' '||V_REG.NOMBRE||' '||V_REG.LOC);
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO NO ENCONTRADO');
END;

--2.	Pasando el Dept_no como parámetro calcula para cada oficio el número de empleados que tiene, puede salir 0. 
--Observación: Dado que sólo tenemos cursores implícitos no podemos tener mas de una respuesta por cada consulta 
-- necesitamos una consulta distinta para contar cada uno de los oficios. Gestiona también las excepciones.

CREATE OR REPLACE PROCEDURE MUESTRA_OFICIOS (NUM NUMBER)
AS
 DEPTO NUMBER(3); 
 NOMBRE VARCHAR2(30); 
 TOTAL NUMBER(4);
BEGIN
 SELECT D.DEPT_NO, DNOMBRE INTO DEPTO, NOMBRE FROM DEPART D 
WHERE D.DEPT_NO = NUM;
SELECT COUNT(*) INTO TOTAL FROM EMPLE WHERE DEPT_NO = NUM AND OFICIO = 'VENDEDOR';

DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO '||NOMBRE||' TIENE '||TOTAL||' VENDEDORES');

 SELECT D.DEPT_NO, DNOMBRE INTO DEPTO, NOMBRE FROM DEPART D
WHERE D.DEPT_NO = NUM;
SELECT COUNT(*) INTO TOTAL FROM EMPLE WHERE DEPT_NO = NUM AND OFICIO = 'EMPLEADO';

DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO '||NOMBRE||' TIENE '||TOTAL||' EMPLEADOS');

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO NO ENCONTRADO');
END;


--OTRA VERSION
CREATE OR REPLACE PROCEDURE EJERCICIO_2 (NUMDEPT NUMBER)
AS
V_ANALISTA NUMBER(2);
V_EMPLEADO NUMBER(2);
BEGIN
SELECT COUNT(*) INTO V_ANALISTA FROM EMPLE WHERE OFICIO='ANALISTA' AND DEPT_NO=NUMDEPT;
SELECT COUNT(*) INTO V_EMPLEADO FROM EMPLE WHERE OFICIO='EMPLEADO' AND DEPT_NO=NUMDEPT;

DBMS_OUTPUT.PUT_LINE('EL NUMERO DE ANALISTAS ES: '|| V_ANALISTA);
DBMS_OUTPUT.PUT_LINE('EL NUMERO DE EMPLEADOS ES: '|| V_EMPLEADO);

EXCEPTION


END;
--3.	Crea un procedimiento que al recibir el nombre de un fabricante nos muestra la facturación de ese fabricante, 
--tanto en nº de pedidos como en facturación, es decir: precio_venta*unidades_pedidas.

CREATE OR REPLACE PROCEDURE MUESTRA_FACTURACION (FABRICANTE VARCHAR2)
AS
 FACTURACION NUMBER(5,2); 
 PEDIDOS NUMBER(5,2); 

BEGIN
SELECT SUM(UNIDADES_VENDIDAS * PRECIO_VENTA) INTO FACTURACION
FROM ARTICULOS A, VENTAS V
WHERE A.ARTICULO = V.ARTICULO 
AND A.COD_FABRICANTE = V.COD_FABRICANTE
AND A.COD_FABRICANTE = (SELECT COD_FABRICANTE FROM FABRICANTES WHERE NOMBRE = FABRICANTE)
AND A.PESO = V.PESO
AND A.CATEGORIA = V.CATEGORIA
GROUP BY A.COD_FABRICANTE;

SELECT COUNT(*) INTO PEDIDOS
FROM ARTICULOS A, PEDIDOS V
WHERE A.ARTICULO = V.ARTICULO 
AND A.COD_FABRICANTE = V.COD_FABRICANTE
AND A.COD_FABRICANTE = (SELECT COD_FABRICANTE FROM FABRICANTES WHERE NOMBRE = FABRICANTE)
AND A.PESO = V.PESO
AND A.CATEGORIA = V.CATEGORIA
GROUP BY A.COD_FABRICANTE;



DBMS_OUTPUT.PUT_LINE('EL FABRICANTE '|| FABRICANTE ||' FACTURO '|| FACTURACION);
DBMS_OUTPUT.PUT_LINE('EL FABRICANTE '|| FABRICANTE ||' TUVO '|| PEDIDOS ||' PEDIDOS.');
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO NO ENCONTRADO');
END;

--**
--SACAR ANTES EL DATO QUE SE SUBCONSULTARÁ
--**
CREATE OR REPLACE PROCEDURE MUESTRA_FACTURACION (FABRICANTE VARCHAR2)
AS
 COD_FAB NUMBER(3);
 FACTURACION NUMBER(5,2); 
 PEDIDOS NUMBER(5,2); 

BEGIN
SELECT COD_FABRICANTE INTO COD_FAB FROM FABRICANTES WHERE NOMBRE = FABRICANTE; 

SELECT SUM(UNIDADES_VENDIDAS * PRECIO_VENTA) INTO FACTURACION
FROM ARTICULOS A, VENTAS V
WHERE A.ARTICULO = V.ARTICULO 
AND A.COD_FABRICANTE = V.COD_FABRICANTE
AND A.COD_FABRICANTE = FABRICANTE
AND A.PESO = V.PESO
AND A.CATEGORIA = V.CATEGORIA
GROUP BY A.COD_FABRICANTE;

SELECT COUNT(*) INTO PEDIDOS FROM PEDIDOS WHERE COD_FABRICANTE = FABRICANTE GROUP BY COD_FABRICANTE;

DBMS_OUTPUT.PUT_LINE('EL FABRICANTE '|| FABRICANTE ||' FACTURO '|| FACTURACION);
DBMS_OUTPUT.PUT_LINE('EL FABRICANTE '|| FABRICANTE ||' TUVO '|| PEDIDOS ||' PEDIDOS.');
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO NO ENCONTRADO');
END;

--4.	Crea un procedimiento que al recibir el código de un colegio nos muestre la cantidad de profesores, por un lado,
-- y también la cantidad de personal que trabaja en ese colegio.

CREATE OR REPLACE PROCEDURE MUESTRA_TRABAJADORES (CODCOLE NUMBER)
AS
 TOTALPROFE NUMBER(5); 
 TOTALTRABAJA NUMBER(5); 
 NOMBRECOLE VARCHAR2(30);
BEGIN
SELECT COUNT(*) INTO TOTALPROFE FROM PROFESORES
WHERE COD_CENTRO = CODCOLE;
SELECT COUNT(*) INTO TOTALTRABAJA FROM PERSONAL
WHERE COD_CENTRO = CODCOLE;

SELECT NOMBRE INTO NOMBRECOLE FROM CENTROS 
WHERE COD_CENTRO = CODCOLE;

DBMS_OUTPUT.PUT_LINE(NOMBRECOLE ||' TIENE '|| TOTALPROFE|| ' PROFESORES  Y '|| TOTALTRABAJA||' TRABAJADORES');

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('COLEGIO NO ENCONTRADO');
END;

--5.	Crea 1 tabla con los mismos datos de fabricantes y con 2 columnas más:
--a.	Facturación.
--b.	Número_unidades.
--Cada vez que se recibe un pedido (estos son los parámetros del procedure) el programa recalcula la facturación y el número
-- de unidades de ese fabricante, y actualiza en la tabla nueva esos datos. (Observación: cuando crees la tabla ten 
--	presente que la necesitas con los datos.)
CREATE TABLE MISFABRICANTES
(
 COD_FABRICANTE NUMBER(3) PRIMARY KEY,
 NOMBRE VARCHAR2(15),
 PAIS VARCHAR2(15),
 FACTURACION NUMBER(8,2),
 NUMERO_UNIDADES NUMBER(8)
);

--METERLE DATOS
INSERT INTO MISFABRICANTES
SELECT F.COD_FABRICANTE, F.NOMBRE, F.PAIS, SUM(UNIDADES_VENDIDAS * PRECIO_VENTA) FACTURACION, 
SUM(UNIDADES_VENDIDAS) NRO_UNIDADES
FROM FABRICANTES F, ARTICULOS A, VENTAS V
WHERE F.COD_FABRICANTE = A.COD_FABRICANTE
AND F.COD_FABRICANTE = V.COD_FABRICANTE
AND A.ARTICULO = V.ARTICULO 
AND A.COD_FABRICANTE = V.COD_FABRICANTE
AND A.PESO = V.PESO
AND A.CATEGORIA = V.CATEGORIA
GROUP BY  F.COD_FABRICANTE, F.NOMBRE, F.PAIS
--HACER UNA VISTA??

CREATE OR REPLACE PROCEDURE ACTUALIZADOR_FACTURACION (NIF VARCHAR2, ARTICULO VARCHAR2, COD_F VARCHAR2,
PESO NUMBER, CATEGORIA VARCHAR2, UNIDADES NUMBER)
AS
BEGIN
INSERT INTO PEDIDOS
VALUES(NIF, ARTICULO, COD_F , PESO, CATEGORIA, SYSDATE, UNIDADES);

UPDATE MISFABRICANTES
SET NUMERO_UNIDADES = (NUMERO_UNIDADES + UNIDADES),
    FACTURACION = (SELECT SUM(UNIDADES_VENDIDAS * PRECIO_VENTA)  
     FROM ARTICULOS A, VENTAS V
     WHERE A.ARTICULO = V.ARTICULO 
     AND A.COD_FABRICANTE = V.COD_FABRICANTE
     AND A.PESO = V.PESO
     AND A.CATEGORIA = V.CATEGORIA
     AND A.COD_FABRICANTE = COD_F 
     GROUP BY  A.COD_FABRICANTE)
WHERE MISFABRICANTES.COD_FABRICANTE = COD_F ;

DBMS_OUTPUT.PUT_LINE('DATOS ACTUALIZADOS');

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('HAY DATOS QUE NO SON CORRECTOS');
END;

-- VERSION DEL PROFESOR, CON LOS DATOS SEPARADOS
CREATE OR REPLACE PROCEDURE EJERCICIO_5(N VARCHAR2, ART VARCHAR2, COD NUMBER, CAT VARCHAR2, UNI NUMBER)
AS
V_FACT NUMBER(6,2);
V_UNI NUMBER(4);
BEGIN
INSERT INTO PEDIDOS VALUES(N, ART, COD, PES, CAT, SYSDATE, UNI);

SELECT SUM(unidades_pedidas*PRECIO_VENTA) INTO V_FACT
FROM ARTICULOS A, PEDIDOS P WHERE A.ARTICULO=P.ARTICULO AND A.COD_FABRICANTE=P.COD_FABRICANTE AND A.PESO=P.PESO
AND A.CATEGORIA=P.CATEGORIA AND P.COD_FABRICANTE= COD GROUP BY P.COD_FABRICANTE;

SELECT SUM(UNIDADES_PEDIDAS) INTO V_UNI FROM PEDIDOS WHERE COD_FABRICANTE GROUP BY COD_FABRICANTE;

UPDATE FACTURACION
SET FACT=V_FACT, UNIDADES=V_UNI
WHERE COD_FABRICANTE= COD;

EXCEPTION
WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('HAY DATOS QUE NO SON CORRECTOS');

WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('ERROR'); 
END;

--6.	Crea un procedimiento que inserta un artículo nuevo y pasamos todos sus datos como parámetros. Después el 
--procedimiento intenta insertar un pedido y una venta para cada una de las tiendas existentes (Unidades pedidas 5, 
--Unidades vendidas 5).  Mostrará la suma de las unidades vendidas y la suma de las unidades vendidas.
--Observaciones: 
--PK Artículos: Artículo, Cod_fabricante, Peso, Categoría.
--Gestiona excepciones: Sólo las suficientes y necesarias.
CREATE OR REPLACE PROCEDURE INSERTA_ART(ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2, PR_VENTA NUMBER, 
PR_COSTO NUMBER, EXIST NUMBER)
AS
V_TOTAL_VENDIDAS NUMBER(4);
V_TOTAL_PEDIDAS NUMBER(4);
BEGIN
INSERT INTO ARTICULOS
VALUES(ART, COD, PES, CAT, PR_VENTA, PR_COSTO, EXIST);

IF (SQL%ROWCOUNT = 0) THEN
	DBMS_OUTPUT.PUT_LINE('ARTICULOS NO INSERTADOS');

ELSE
 INSERT INTO PEDIDOS
 SELECT NIF, ART, COD, PES, CAT, SYSDATE, 5 FROM TIENDAS;
 
 INSERT INTO VENTAS
 SELECT NIF, ART, COD, PES, CAT, SYSDATE, 5 FROM TIENDAS;
 
 SELECT SUM(UNIDADES_VENDIDAS) INTO V_TOTAL_VENDIDAS
 FROM VENTAS WHERE ARTICULO=ART AND COD_FABRICANTE= COD AND  PESO = PES AND CATEGORIA = CAT;
 --NO HACE FALTA AGRUPAR, PORQUE SUM SUMA TODOS LOS ARTICULOS 
 
 SELECT SUM(UNIDADES_PEDIDAS) INTO V_TOTAL_PEDIDAS
 FROM PEDIDOS WHERE ARTICULO=ART AND COD_FABRICANTE= COD AND  PESO = PES AND CATEGORIA = CAT;
 --NO HACE FALTA AGRUPAR.

DBMS_OUTPUT.PUT_LINE('TOTAL UNIDADES VENDIDAS INGRESADAS:'||V_TOTAL_VENDIDAS);
DBMS_OUTPUT.PUT_LINE('TOTAL UNIDADES PEDIDAS INGRESADAS'||V_TOTAL_PEDIDAS);
END IF;

EXCEPTION
WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('HAY DATOS QUE NO SON CORRECTOS');

WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('ERROR'); 
END;

--7.	Crea un procedimiento que recibe los datos de un empleado  (EMP_NO, APELLIDO, OFICIO, DIR, FECHA_ALT, 
--	COMISION, DEPT_NO) La comisión por defecto será 0. (Recuerda que la asignación de valores a los parámetros es 
--posicional en la ejecución del procedimiento). EL SALARIO estará en función del departamento en el que se inserte al 
--empleado, siendo este salario el salario medio de su departamento aumentado en un 3% y sin decimales.
--Observaciones:
--Controla que el empleado se inserta en un departamento existente y que el salario y la comisión son positivos.
--Gestiona las excepciones necesarias y suficientes.
CREATE OR REPLACE AGREGA_EMPLEADO (NRO_EMP NUMBER, APE VARCHAR2, OFI VARCHAR2, D NUMBER, DEPT NUMBER, 
	COM NUMBER DEFAULT 0)
AS
V_SALAR NUMBER(6, 2);
V_NUM NUMBER(1);
BEGIN 
SELECT COUNT(*) INTO V_NUM FROM DEPART WHERE DEPT_NO = DEPT;

IF (V_NUM=1 AND COM>=0) THEN
	SELECT TRUNC ((AVG SALARIO)*1.03) INTO V_SALAR FROM EMPLE WHERE DEPT_NO = DEPT;
	INSERT INTO EMPLE VALUES (EMP, APE, OFI, D, FECHA, V_SALAR, COM, DEPT);
ELSE
	DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO NO EXISTE');
END IF;

WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('ERROR'); 
END;