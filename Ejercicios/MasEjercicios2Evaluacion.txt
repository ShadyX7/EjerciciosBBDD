******TEMA 6 *******

1.Escribe sentencia INSERT...

INSERT INTO PROFESORES
(APELLIDOS, COD_CENTRO, DNI, ESPECIALIDAD)
VALUES ('González Sevilla, Miguel A.', 22,
23444800,'HISTORIA');



2.Inserta profesores 16 caracteres...

INSERT INTO PROFESORES VALUES
(22, 23444800, 'González Sevilla, Miguel Á.',
'HISTORIA DEL ANTIGUO EGIPTO');
(22, 23444800, 'González Sevilla, Miguel Á.',
'HISTORIA DEL ANTIGUO EGIPTO');



3.ALUM y NUEVOS, insertar en ALUM alumnos...

INSERT INTO ALUM
(SELECT * FROM NUEVOS MINUS SELECT * FROM ALUM);



4. Inserta emple apellido 'SAAVEDRA' numero 2000, salario igual...

INSERT INTO EMPLE
SELECT 2000, 'SAAVEDRA', OFICIO, DIR, SYSDATE,
SALARIO*1.2, COMISION, DEPT_NO
FROM EMPLE WHERE APELLIDO = 'SALA';



5.Aumenta 100 euros salario, 10 euros comision, EMPLE...

UPDATE EMPLE SET SALARIO = SALARIO + 100,
COMISION = COMISION + 10
WHERE DEPT_NO = 10;



6. Modifica el num de depart de 'SAAVEDRA'...

UPDATE EMPLE SET DEPT_NO =
(SELECT DEPT_NO FROM EMPLE WHERE
OFICIO = 'EMPLEADO'
GROUP BY DEPT_NO
HAVING COUNT(*) =
(SELECT MAX(COUNT(*)) FROM EMPLE
WHERE OFICIO = 'EMPLEADO'
GROUP BY DEPT_NO)
)
WHERE APELLIDO = 'SAAVEDRA';



7. Borra tabla ALUM (Alumnos antiguos)...

DELETE FROM ALUM WHERE NOMBRE IN
(SELECT NOMBRE FROM ANTIGUOS);



8. Borra todos departs de DEPART de los no existen empleados...

DELETE FROM DEPART WHERE DEPT_NO IN
(SELECT DEPT_NO FROM DEPART
MINUS
SELECT DEPT_NO FROM EMPLE);




9. Modifica num plazas valor = mitad en centros - 2 profesores...

UPDATE CENTROS
SET NUM_PLAZAS = NUM_PLAZAS/2
WHERE COD_CENTRO IN (
SELECT COD_CENTRO FROM PROFESORES
GROUP BY COD_CENTRO
HAVING COUNT(*) < 2
UNION
(SELECT COD_CENTRO FROM CENTROS
MINUS
SELECT COD_CENTRO FROM PROFESORES)
);



10. Elimina centros sin personal...

DELETE CENTROS WHERE COD_CENTRO
NOT IN
(SELECT COD_CENTRO FROM PERSONAL);



11. Añade un profe en centro con administracion sea 1 'IDIOMA' DNI 87900...


INSERT INTO PROFESORES
SELECT DISTINCT COD_CENTRO, 8790055,
'Salas, Clara', 'IDIOMA'
FROM PERSONAL WHERE COD_CENTRO IN
(SELECT COD_CENTRO FROM PERSONAL
WHERE FUNCION = 'ADMINISTRATIVO'
GROUP BY COD_CENTRO HAVING COUNT(*) = 1);



12. Borra al personal en centros - 300 plazas y -2 profes...


DELETE PERSONAL
WHERE COD_CENTRO IN
(SELECT COD_CENTRO FROM CENTROS
WHERE NUM_PLAZAS < 300)
AND COD_CENTRO IN
(SELECT COD_CENTRO FROM PROFESORES
GROUP BY COD_CENTRO HAVING COUNT(*) < 2);



13.Borra a los profes de la tabla PROFESORES y no esten en PERSONAL...


DELETE PROFESORES
WHERE DNI NOT IN (SELECT DNI FROM PERSONAL);



14. Da de alta dos tiendas en "SEVILLA" mete 30 unidads con nombre "GALLO"...


INSERT INTO TIENDAS VALUES('4100-A',
'La Económica', 'C/La Feria s/n',
'Camas','SEVILLA',41900);
INSERT INTO TIENDAS VALUES('4101-B',
'Comestibles Peter', 'C/Sevillanas 130',
'Dos hermanas', 'SEVILLA',41700);
INSERT INTO PEDIDOS
SELECT NIF, ARTICULO, A.COD_FABRICANTE,
PESO,
CATEGORIA, SYSDATE, 30
FROM TIENDAS, ARTICULOS A, FABRICANTES F
WHERE PROVINCIA = 'SEVILLA'
AND F.NOMBRE = 'GALLO'
AND A.COD_FABRICANTE = F.COD_FABRICANTE;



15. Realiza una venta para tiendas "TOLEDO" de 10 unidades...

INSERT INTO VENTAS
SELECT NIF, ARTICULO, COD_FABRICANTE, PESO,
CATEGORIA, SYSDATE, 10
FROM TIENDAS, ARTICULOS
WHERE PROVINCIA = 'TOLEDO' AND
CATEGORIA = 'Primera';



16. Para aquellos articulos que se han vendido + de 30 unidades, realizar pedido 10 unidades...

INSERT INTO PEDIDOS
SELECT DISTINCT '5555-B', ARTICULO,
COD_FABRICANTE, PESO, CATEGORIA, SYSDATE, 10
FROM VENTAS
GROUP BY ARTICULO, COD_FABRICANTE, PESO,
CATEGORIA
HAVING SUM(UNIDADES_VENDIDAS) > 30;



17. Cambia los datos tienda NIF-'1111-A' igualandolos a la de NIF '2222-A'...

UPDATE TIENDAS
SET (NOMBRE, DIRECCION, POBLACION, PROVINCIA,
CODPOSTAL) =
(SELECT NOMBRE, DIRECCION, POBLACION,
PROVINCIA, CODPOSTAL
FROM TIENDAS WHERE NIF = '2222-A')
WHERE NIF = '1111-A';



18.Cambia todos articulos de 'Primera' categoria a 'Segunda' de ITALA...

UPDATE ARTICULOS
SET CATEGORIA = 'Segunda'
WHERE CATEGORIA = 'Primera'
AND COD_FABRICANTE =
(SELECT COD_FABRICANTE FROM FABRICANTES
WHERE PAIS = 'ITALIA');



19.Modifica pedidos en q cantidad de pedidos sea superior..asignando el 20 por 100 de existencias...


UPDATE PEDIDOS P
SET UNIDADES_PEDIDAS =
(SELECT EXISTENCIAS*0.2
FROM ARTICULOS
WHERE ARTICULO = P.ARTICULO AND
COD_FABRICANTE = P.COD_FABRICANTE
AND
PESO = P.PESO AND
CATEGORIA = P.CATEGORIA)
WHERE UNIDADES_PEDIDAS >
(SELECT EXISTENCIAS FROM ARTICULOS
WHERE ARTICULO = P.ARTICULO AND
COD_FABRICANTE = P.COD_FABRICANTE
AND
PESO = P.PESO AND
CATEGORIA = P.CATEGORIA);



20. Elimina aquellas tiendas q no han realizado ventas...

DELETE TIENDAS
WHERE NIF NOT IN
(SELECT DISTINCT NIF FROM VENTAS);



21. Elimina los articulos que no hayan tenido compras ni ventas...


(SELECT DISTINCT ARTICULO,
COD_FABRICANTE, PESO, CATEGORIA
FROM VENTAS)
AND (ARTICULO, COD_FABRICANTE, PESO, CATEGORIA)
NOT IN
(SELECT DISTINCT ARTICULO, COD_FABRICANTE,
PESO, CATEGORIA FROM PEDIDOS);



22. Borra los pedidos de 'primera' categoria cuyo país es 'BELGICA'...

DELETE PEDIDOS
WHERE COD_FABRICANTE IN
(SELECT COD_FABRICANTE FROM FABRICANTES
WHERE PAIS = 'BELGICA')
AND CATEGORIA = 'Primera';



23. Borra pedidos q no tengan tiena...

DELETE PEDIDOS WHERE NIF NOT IN
(SELECT NIF FROM TIENDAS);



24. Resta uno a las unidades de los últimos pedidos de tienda con NIF '5555-B'...


UPDATE PEDIDOS
SET UNIDADES_PEDIDAS = UNIDADES_PEDIDAS - 1
WHERE NIF = '5555-B' AND FECHA_PEDIDO =
(SELECT MAX(FECHA_PEDIDO) FROM PEDIDOS
WHERE NIF = '5555-B');



25. Elimina el artículo que tenga menos facturación...

DELETE FROM ARTICULOS 
WHERE(ARTICULO, COD_FABRICANTE, PESO, CATEGORIA) IN
(SELECT A. ARTICULO, A.COD_FABRICANTE, A.PESO, A.CATEGORIA FROM ARTICULOS A, VENTAS V WHERE A.ARTCULO=V.ARTICULO AND A.COD_FABRICANTA=V.COD_FABRICANTE AND A.PESO=V.PESO AND A.CATEGORIA=V.CATEGORIA
GROUP BY A. ARTICULO, A.COD_FABRICANTE, A.PESO, A.CATEGORIA
HAVING SUM(PRECIO_VENTA*UNIDADES_VENDIDAS)=(SELECT MIN(SUM(PRECIO_VENTA* UNIDADES_VENDIDAS ))
FROM ARTICULAS A, VENTAS V
WHERE A.ARTICULO=V.ARTICULO AND A.COD_FABRICANTA=V.COD_FABRICANTE AND A.PESO=V.PESO AND A.CATEGORIA=V.CATEGORIA))



26. Crea un artículo nuevo de categoría ‘Primera’. Crea pedidos suyos para las tiendas de Madrid, con 15 unidades pedidas.

INSERT INTO ARTICULOS 
VALUES
(‘Fruta, 20, 1 ‘Primera’, 2, 1, 10);
INSERT INTO PEDIDOS
SELECT NIF, ‘Fruta’, 20, 1, ‘Primera’, SYSDATE, 15
FROM TIENDAS WHERE PROVINCIA =’MADRID’;



27.Modifica el artículo ‘Macarrones’, 20, 1, ‘Primera’, restando a sus existencias las unidades pedidas del último pedido.

UPDATE ARTICULOS
SET EXISTENCIAS = EXISTENCIAS - (SELECT UNIDADES_PEDIDAS FROM PEDIDOS
WHERE ARTICULO='Macarrones' AND COD_FABRICANTE =20 AND PESO =1 AND 	CATEGORIA 	='Primera'
AND FECHA_PEDIDO=(SELECT MAX(FECHA_PEDIDO) FROM PEDIDOS
WHERE ARTICULO ='Macarrones' AND COD_FABRICANTE = 20  AND
PESO = 1 AND CATEGORIA = 'Primera'))

		

28.Elimina los alumnos que están en Antiguos y no en Nuevos.

DELETE FROM ALUM WHERE 
NOMBRE IN (SELECT NOMBRE FROM ANTIGUOS)
AND 
NOMBRE NOT IN (SELECT NOMBRE FROM NUEVOS)


29. Aumenta el salario de los empleados en un 3% a los empleados del departamento que menos gasta en salarios.


UPDATE EMPLE 
SET SALARIO = SALARIO * 1.03
WHERE DEPT_NO IN (SELECT DEPT_NO, SUM(SALARIO) FROM EMPLE GROUP BY DEPT_NO
HAVING SUM(SALARIO)=(SELECT MIN(SUM(SALARIO)) FROM EMPLE GROUP BY DEPT_NO));



30. Aumenta el precio venta en un 5% de aquel artículo que tiene más pedidos.


UPDATE ARTICULOS
SET PRECIO_VENTA=PRECIO_VENTA*1.05
WHERE (ARTICULO, COD_FABRICANTE, PESO, CATEGORIA) IN
(SELECT ARTICULO, COD_FABRICANTE, PESO, CATEGORIA, COUNT(*) FROM PEDIDOS
GROUP BY ARTICULO, COD_FABRICANTE, PESO, CATEGORIA
HAVING COUNT(*)=(SELECT MAX(COUNT(*)) FROM PEDIDOS
GROUP BY ARTICULO, COD_FABRICANTE, PESO, CATEGORIA));



31. Disminuye en un 5% el precio venta de aquellos artículos que tienen menos facturación.


UPDATE ARTICULOS
SET PRECIO_VENTA=PRECIO_VENTA*0.95	
WHERE (ARTICULO, COD_FABRICANTE, PESO, CATEGORIA) IN
(SELECT ARTICULO, COD_FABRICANTE, PESO, CATEGORIA, COUNT(*) FROM PEDIDOS
GROUP BY ARTICULO, COD_FABRICANTE, PESO, CATEGORIA
HAVING COUNT(*)=(SELECT MIN(COUNT(*)) FROM PEDIDOS
GROUP BY ARTICULO, COD_FABRICANTE, PESO, CATEGORIA));



32. Crea un nuevo profesor y le asignas el centro que menos profesores tenga.


INSERT INTO PROFESORES 
SELECT COD_CENTRO, 123, 'Martinez, Luisa', 'BIOLOGIA'
FROM PROFESORES
HAVING COUNT(*)=(SELECT MIN(COUNT(*)) FROM PROFESORES GROUP BY COD_CENTRO);



33. Crea una tienda nueva y la abasteces con artículos de fabricantes españoles (un pedido por cada artículo)
		

INSERT INTO PEDIDOS
(SELECT '6464-J', ARTICULO, COD_FABRICANTE, PESO, CATEGORIA, SYSDATE, 5
FROM ARTICULOS
WHERE COD_FABRICANTE IN (SELECT COD_FABRICANTE FROM FABRICANTES 	
WHERE PAIS='ESPAÑA'));


Asigna a cada empleado el salario medio de su departamento, pero sólo a los que ganen menos de la media de su departamento. (subconsulta correlacionada)

UPDATE EMPLE E
SET SALARIO=(SELECT AVG(SALARIO) FROM EMPLE WHERE DEPT_NO=E.DEPT_NO)
WHERE SALARIO < (SELECT AVG(SALARIO) FROM EMPLE WHERE 	DEPT_NO=E.DEPT_NO);

Resta una unidad pedida a los últimos pedidos de cada tienda.

UPDATE PEDIDOS
SET UNIDADES_PEDIDAS=UNIDADES_PEDIDAS-1
WHERE (NIF, FECHA_PEDIDO) IN (SELECT NIF, MAX(FECHA_PEDIDO) FROM
PEDIDOS GROUP BY NIF)




34. Crea un nuevo profesor e insértalo en el centro con mas plazas.


INSERT INTO PROFESORES
SELECT COD_CENTRO, 876, 'PEREZ, ANTONIO', 'LENGUA'
FROM CENTROS WHERE NUM_PLAZAS = (SELECT MAX (NUM_PLAZAS) FROM 	CENTROS);



35. Crea un nuevo artículo de categoría ‘Segunda’. Crea pedidos y ventas en las tiendas de Madrid.


INSERT INTO ARTICULOS
VALUES
('Pizza', 20, 1, 'Segunda', 2, 1, 100)
INSERT INTO VENTAS
SELECT NIF, 'Pizza', 20, 1, 'Segunda', 2, 1,100)



36. Actualiza las existencias del artículo creado anteriormente, restando las unidades pedidas.
	

UPDATE ARTICULOS SET EXISTENCIAS=
EXISTENCIAS - (SELECT SUM(UNIDADES_PEDIDAS) FROM PEDIDOS
WHERE ARTICULO='Pizza' AND COD_FABRICANTE = 20 AND PESO =1 AND
CATEGORIA = 'Segunda')
WHERE ARTICULO = 'Pizza' and COD_FABRICANTE = 20 AND PESO = 1 
AND CATEGORIA = 'Segunda';




******TEMA 7 *******


1. Investiga las columnas de User_tables utilizala para consultar el nombre de tablas...

SELECT TABLE_NAME, NUM_ROWS FROM USER_TABLES;


-Investiga USER_OBJECTS y USER_CATALOG...

SELECT TABLE_NAME FROM USER_CATALOG;
SELECT OBJECT_NAME FROM USER_OBJECTS WHERE
OBJECT_TYPE = 'TABLE';



2. Hemos creado las tablas PROVINCIAS Y PERSONAS, inserta filas...

INSERT INTO PROVINCIAS VALUES(6, 'BADAJOZ');
INSERT INTO PROVINCIAS VALUES(28, 'MADRID');
INSERT INTO PERSONAS VALUES(1111,'Juan',
'Las Peñas 16','Don Benito',6);
INSERT INTO PERSONAS VALUES(2222,'María',
'Alcalá 155','Madrid',28);
COMMIT;

-Inserta filas a PERSONAS dando a COD-PROVIN un valor q no exista en PROVINCIAS...

Al insertar en PERSONAS un codigo inexistente, se produce un
error y no se inserta la fila:
INSERT INTO PERSONAS VALUES(1,'María',
'Alcalá 155','Madrid',22);
INSERT INTO PERSONAS VALUES(1,'María',
'Alcalá 155','Madrid',22)
*
ERROR en línea 1:
ORA-02291: restricción de integridad (MAJESUS.
FK_PERSONAS) violada - clave
principal no encontrada



3. Crea la tabla EJEMPLO2 con DNI,NOMBRE Y USUARIO. Asigna a NOMBRE 'No definido'...

CREATE TABLE EJEMPLO2
(
DNI VARCHAR2(10) NOT NULL,
NOMBRE VARCHAR2(30) DEFAULT 'No definido',
USUARIO NUMBER DEFAULT UID
);
INSERT INTO EJEMPLO2(DNI) VALUES ('1111');
SELECT * FROM EJEMPLO2;



4. Crea la siguiente tablas con las restricciones ( TABLA FABRICANTES, ARTICULOS )


CREATE TABLE FABRICANTES
(
COD_FABRICANTE NUMBER(3)
CONSTRAINT PK_FA PRIMARY KEY,
NOMBRE VARCHAR2(15),
PAIS VARCHAR2(15),
CONSTRAINT CK_NO CHECK(NOMBRE = UPPER(NOMBRE)
AND PAIS = UPPER(PAIS))
);
CREATE TABLE ARTICULOS
(
ARTICULO VARCHAR2(20) NOT NULL,
COD_FABRICANTE NUMBER(3) NOT NULL,
PESO NUMBER(3) NOT NULL
CONSTRAINT CK1_AR CHECK(PESO > 0),
CATEGORIA VARCHAR2(10) NOT NULL,
PRECIO_VENTA NUMBER(4)
CONSTRAINT CK2_AR CHECK(PRECIO_VENTA > 0),
PRECIO_COSTO NUMBER(4)
CONSTRAINT CK3_AR CHECK(PRECIO_COSTO > 0),
EXISTENCIAS NUMBER(5),
CONSTRAINT PK_ART PRIMARY KEY
(ARTICULO,COD_FABRICANTE,PESO,CATEGORIA),
CONSTRAINT FK_ARFA FOREIGN KEY
(COD_FABRICANTE) REFERENCES FABRICANTES,
CONSTRAINT CK_CAT CHECK(CATEGORIA
IN('Primera','Segunda','Tercera'))
);



5.Crea la tabla TIENDAS sin restricciones...

CREATE TABLE TIENDAS
(
NIF VARCHAR2(10),
NOMBRE VARCHAR2(20),
DIRECCION VARCHAR2(20),
POBLACION VARCHAR2(20),
PROVINCIA VARCHAR2(20),
CODPOSTAL NUMBER(5)
);
ALTER TABLE TIENDAS ADD CONSTRAINT
CK_PRO CHECK(PROVINCIA = UPPER(PROVINCIA));
ALTER TABLE TIENDAS ADD CONSTRAINT
PK_TI PRIMARY KEY (NIF);
ALTER TABLE TIENDAS MODIFY
(NOMBRE VARCHAR2(30) NOT NULL);



6.Crea una vista q contenga datos de los empleados del departam. 10 con salario>1200...

CREATE OR REPLACE VIEW ACTIVIDAD8
AS
SELECT APELLIDO, OFICIO, SALARIO FROM EMPLE
WHERE DEPT_NO = 10 AND SALARIO > 1200;

INSERT INTO ACTIVIDAD8
VALUES('BREÑA', 'CONDUCTOR', 2000);
INSERT INTO ACTIVIDAD8
*
ERROR en línea 1:
ORA-01400: cannot insert NULL into ("SCOTT".
"EMPLE"."EMP_NO")

UPDATE ACTIVIDAD8 SET SALARIO=SALARIO + 100
DELETE ACTIVIDAD8 WHERE SALARIO > 2500;



7. Modifica las columnas de las tablas PEDIDOS y VENTAS para q UNIDADES_VENDIDAS y _PEDIDAS almacenen cantidades 6 digitos...

ALTER TABLE PEDIDOS
MODIFY (UNIDADES_PEDIDAS NUMBER(6));
ALTER TABLE VENTAS
MODIFY (UNIDADES_VENDIDAS NUMBER(6));


8.A partir de la tabla TIENDAS impedir dar de alta a las de TOLEDO...

ALTER TABLE TIENDAS ADD CONSTRAINT CK_TIENTO
CHECK (PROVINCIA != 'TOLEDO');


9. Añade a la tabla PEDIDOS y VENTAS una columna q almacene PVP dela articulo...

ALTER TABLE PEDIDOS ADD(PVP NUMBER(6,2));
ALTER TABLE VENTAS ADD(PVP NUMBER(6,2));


10. Crea una vista que se llame CONSERJES ...

CREATE VIEW CONSERJES AS
SELECT NOMBRE, APELLIDOS
FROM CENTROS, PERSONAL
WHERE FUNCION = 'CONSERJE'
AND CENTROS.COD_CENTRO = PERSONAL.COD_CENTRO;



11. Crea un sinonimo llamado CONSER...

CREATE SYNONYM CONSER FOR CONSERJES;



12. Añade a la tabla PROFESORES una columna COD_ASIG...

ALTER TABLE PROFESORES ADD(COD_ASIG NUMBER(2));



13. Crea la tabla TASIG con las siguientes columnas..2posiciones y NOM_ASIG 20 caracteres...

CREATE TABLE TASIG
(
COD_ASIG NUMBER(2),
NOM_ASIG VARCHAR2(20)
);



14. Añade a la restriccion la clave primaria de COD_ASIG de la tabla TASIG...

ALTER TABLE TASIG ADD CONSTRAINT
PK_TASIG PRIMARY KEY (COD_ASIG);



15. Añade a la restriccion de clave ajena a la colum COD_ASIG de la tabla PROFESORES. Visualiza restricciones y columnas...

ALTER TABLE PROFESORES ADD CONSTRAINT
FK_TASIG FOREIGN KEY (COD_ASIG)
REFERENCES TASIG;
SELECT TABLE_NAME, CONSTRAINT_NAME, COLUMN_NAME
FROM USERSER_CONS_COLUMNS
WHERE TABLE_NAME IN('TASIG','PROFESORES');





































































