--TEMA 3

SELECT AVG(SALARIO) FROM EMPLE WHERE DEPT_NO=(SELECT DEPT_NO FROM DEPART
WHERE DNOMBRE='VENTAS')
---------------------------------------------------------------------------------------------
SELECT * FROM EMPLE WHERE DEPT_NO IN(SELECT DEPT_NO FROM EMPLE WHERE APELLIDO='JIMENEZ')
---------------------------------------------------------------------------------------------
SELECT * FROM EMPLE WHERE OFICIO IN(SELECT OFICIO FROM EMPLE WHERE APELLIDO='GIL')
---------------------------------------------------------------------------------------------
SELECT COUNT(*) FROM EMPLE WHERE DEPT_NO=(SELECT DEPT_NO FROM EMPLE WHERE APELLIDO='ALONSO') AND (SELECT OFICIO FROM EMPLE WHERE APELLIDO= 'JIMENEZ')
---------------------------------------------------------------------------------------------
SELECT COUNT(*) FROM EMPLE WHERE DEPT_NO=10
---------------------------------------------------------------------------------------------
SELECT * FROM EMPLE WHERE OFICIO LIKE '%O%'
---------------------------------------------------------------------------------------------
SELECT * FROM EMPLE WHERE DEPT_NO IN(10,20)
---------------------------------------------------------------------------------------------
SELECT TEMA FROM LIBRERIA WHERE EJEMPLARES>10
---------------------------------------------------------------------------------------------
SELECT* FROM EMPLE E WHERE SALARIO=(SELECT MAX(SALARIO) FROM EMPLE WHERE OFICIO=E.OFICIO)
---------------------------------------------------------------------------------------------
SELECT* FROM EMPLE E WHERE SALARIO=(SELECT MIN(SALARIO) FROM EMPLE WHERE DEPT_NO=E.DEPT_NO)
---------------------------------------------------------------------------------------------
SELECT * FROM ALUMNOS,ASIGNATURAS WHERE NOMBRE='FOL' AND DNI IN(SELECT DNI FROM NOTAS WHERE NOTA<5)
---------------------------------------------------------------------------------------------
SELECT*FROM ALUMNOS WHERE DNI =(SELECT DNI FROM NOTAS WHERE NOTA>=5 AND COD=(SELECT COD FROM ASIGNATURAS WHERE NOMBRE=
---------------------------------------------------------------------------------------------
SELECT * FROM ALUMNOS WHERE DNI =(SELECT DNI FROM NOTAS WHERE COD =(SELECT COD FROM ASIGNATURAS WHERE NOMBRE in ('prog.leng.estr.','sist.informaticos','analisis')))
---------------------------------------------------------------------------------------------
SELECT * FROM ALUMNOS WHERE DNI IN (SELECT DNI FROM NOTAS WHERE NOTA<5 AND COD IN
(SELECT COD FROM ASIGNATURAS WHERE NOMBRE IN ('ANALISIS','PROG.LENG.ESTRUCT','SIST.INFORMATICOS')))
---------------------------------------------------------------------------------------------
SELECT * FROM ALUMNOS WHERE POBLA='Madrid' AND DNI IN (SELECT DNI FROM NOTAS WHERE NOTA<5)
---------------------------------------------------------------------------------------------
SELECT* FROM ALUMNOS AL,NOTAS N,ASIGNATURAS ASIG  WHERE AL.DNI=N.DNI AND ASIG.COD=N.COD AND N.NOTA<5
---------------------------------------------------------------------------------------------
SELECT* FROM ALUMNOS A,NOTAS N,ASIGNATURAS ASIG WHERE A.DNI=N.DNI AND ASIG.COD=N.COD AND N.DNI NOT IN(SELECT DISTINCT DNI FROM NOTAS WHERE NOTA<5)
---------------------------------------------------------------------------------------------
SELECT * FROM ALUMNOS,NOTAS,ASIGNATURAS ASIG WHERE NOTA<5 AND POBLA='Madrid' AND ALUMNOS.DNI=NOTAS.DNI AND ASIG.COD=NOTAS.COD
---------------------------------------------------------------------------------------------
SELECT ARTICULO, COD_FABRICANTE,PESO,CATEGORIA FROM ARTICULOS WHERE Cod_fabricante, Peso, Categoria NOT IN (SELECT Cod_fabricante, Peso, Categoria FROM PEDIDOS) AND Cod_fabricante, Peso, Categoria NOT IN (SELECT Cod_fabricante, Peso, Categoria FROM VENTAS)
---------------------------------------------------------------------------------------------
SELECT ARTICULO,COD_FABRICANTE,PESO,CATEGORIA FROM ARTICULOS WHERE COD_FABRICANTE IN(SELECT COD_FABRICANTE FROM VENTAS)

--TEMA 6

DELETE FROM ARTICULOS
WHERE (ARTICULO, COD_FABRICANTE, PESO, CATEGORIA) IN 
(SELECT A.ARTICULO, A.COD_FABRICANTE, A.PESO, A.CATEGORIA FROM ARTICULOS A, VENTAS V
WHERE A.ARTICULO=V.ARTICULO AND A.COD_FABRICANTE=V.COD_FABRICANTE AND A.PESO=V.PESO AND
A.CATEGORIA=V.CATEGORIA
GROUP BY A.ARTICULO, A.COD_FABRICANTE, A.PESO, A.CATEGORIA
HAVING SUM ( PRECIO_VENTA * UNIDADES_VENDIDAS)=(SELECT
MIN (SUM (PRECIO_VENTA*UNIDADES_VENDIDAS))
FROM ARTICULOS A, VENTAS V
WHERE A.ARTICULO= V.ARTICULO AND A.COD_FABRICANTE = V.COD_FABRICANTE AND
A.PESO=V.PESO AND A.CATEGORIA=V.CATEGORIA
GROUP BY A.ARTICULO, A.COD_FABRICANTE, A.PESO, A.CATEGORIA))

-----------------------------------------------------------------------------------------

INSERT INTO ARTICULOS
VALUES
('Fruta', 20, 1, 'Primera' , 2, 1, 10);
	
INSERT INTO PEDIDOS 
SELECT NIF, 'Fruta',20, 1, 'Primera', SYSDATE, 15
FROM TIENDAS WHERE PROVINCIA='MADRID';

----------------------------------------------------------------------

UPDATE ARTICULOS
SET EXISTENCIAS = EXISTENCIAS - (SELECT UNIDADES_PEDIDAS FROM PEDIDOS
WHERE ARTICULO='Macarrones' AND COD_FABRICANTE =20 AND PESO =1 AND CATEGORIA ='Primera'
AND FECHA_PEDIDO=(SELECT MAX(FECHA_PEDIDO) FROM PEDIDOS
WHERE ARTICULO ='Macarrones' AND COD_FABRICANTE = 20  AND
PESO = 1 AND CATEGORIA = 'Primera'))
WHERE ARTICULO = 'Macarrones' AND COD_FABRICANTE=20 AND
PESO=1 AND CATEGORIA='Primera'

----------------------------------------------------------------------


DELETE FROM ALUM WHERE
NOMBRE IN (SELECT NOMBRE FROM ANTIGUOS)
AND
NOMBRE NOT IN (SELECT NOMBRE FROM NUEVOS)

----------------------------------------------------------------------


UPDATE EMPLE
SET SALARIO = SALARIO*1.03
WHERE DEPT_NO IN (SELECT DEPT_NO FROM EMPLE GROUP BY DEPT_NO
HAVING SUM (SALARIO)= (SELECT MIN (SUM(SALARIO)) FROM EMPLE GROUP BY DEPT_NO));

-------------------------------------------------------------------------------

UPDATE ARTICULOS
SET PRECIO_VENTA = PRECIO_VENTA*1.05
WHERE (ARTICULO, COD_FABRICANTE, PESO, CATEGORIA) IN 
(SELECT ARTICULO, COD_FABRICANTE, PESO, CATEGORIA FROM PEDIDOS
GROUP BY ARTICULO, COD_FABRICANTE, PESO, CATEGORIA
HAVING COUNT (*) = (SELECT MAX(COUNT(*)) FROM PEDIDOS
GROUP BY ARTICULO, COD_FABRICANTE, PESO, CATEGORIA));

--------------------------------------------------------------------------------

UPDATE ARTICULOS
SET PRECIO_VENTA = PRECIO_VENTA*0.95
WHERE (ARTICULO, COD_FABRICANTE, PESO, CATEGORIA) IN

(SELECT A.ARTICULO, A.COD_FABRICANTE, A.PESO, A.CATEGORIA
FROM PEDIDOS P, ARTICULOS A
WHERE A.ARTICULO=P.ARTICULO AND A.COD_FABRICANTE=P.COD_FABRICANTE
AND A.PESO=P.PESO AND A.CATEGORIA=P.CATEGORIA
GROUP BY A.ARTICULO, A.COD_FABRICANTE, A.PESO, A.CATEGORIA

HAVING SUM(UNIDADES_PEDIDAS*PRECIO_VENTA) = (SELECT
MIN(SUM(UNIDADES_PEDIDAS* PRECIO_VENTA)) FROM PEDIDOS P, ARTICULOS A
WHERE A.ARTICULO=P.ARTICULO AND A.COD_FABRICANTE=P.COD_FABRICANTE
AND A.PESO=P.PESO AND A.CATEGORIA =P.CATEGORIA
GROUP BY A.ARTICULO, A.COD_FABRICANTE, A.PESO, A.CATEGORIA))

-------------------------------------------------------------------------------------

INSERT INTO PROFESORES
SELECT COD_CENTRO, 123, 'Martinez, Luisa', 'BIOLOGIA'
FROM PROFESORES
GROUP BY COD_CENTRO
HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM PROFESORES GROUP BY COD_CENTRO);

-------------------------------------------------------------------------------

INSERT INTO PEDIDOS

(SELECT '6464-J', ARTICULO, COD_FABRICANTE, PESO, CATEGORIA, SYSDATE, 5
FROM ARTICULOS
WHERE COD_FABRICANTE IN (SELECT COD_FABRICANTE FROM FABRICANTES WHERE
PAIS='ESPAÃ‘A'));
-----------------------------------------------------------------------------

UPDATE EMPLE E
SET SALARIO=(SELECT AVG(SALARIO) FROM EMPLE WHERE DEPT_NO=E.DEPT_NO)
WHERE SALARIO < (SELECT AVG(SALARIO) FROM EMPLE WHERE DEPT_NO=E.DEPT_NO);

-----------------------------------------------------------------------------

UPDATE PEDIDOS
SET UNIDADES_PEDIDAS=UNIDADES_PEDIDAS-1
WHERE (NIF, FECHA_PEDIDO) IN (SELECT NIF, MAX(FECHA_PEDIDO) FROM
PEDIDOS GROUP BY NIF)

------------------------------------------------------------------------------

INSERT INTO ARTICULOS
VALUES
('Pizza', 20, 1, 'Segunda', 2, 1, 100)

INSERT INTO VENTAS
SELECT NIF, 'Pizza', 20, 1, 'Segunda', 2, 1,100)

---------------------------------------------------------------------------

UPDATE ARTICULOS SET EXISTENCIAS=
EXISTENCIAS - (SELECT SUM(UNIDADES_PEDIDAS) FROM PEDIDOS
WHERE ARTICULO='Pizza' AND COD_FABRICANTE = 20 AND PESO =1 AND
CATEGORIA = 'Segunda')
WHERE ARTICULO = 'Pizza' and COD_FABRICANTE = 20 AND PESO = 1 
AND CATEGORIA = 'Segunda';

---------------------------------------------------------------------------

--TEMA 7

DROP TABLE ARTICULOS CASCADE CONSTRAINTS
DROP TABLE ARTICULOS08 CASCADE CONSTRAINTS

----------------------------------------------------------------------


CREATE TABLE T1
(
CLAVE1_1 NUMBER(3), 
CLAVE2_1 VARCHAR2(15),
VARIO VARCHAR2(30),
CONSTRAINT PK_T1 PRIMARY KEY (CLAVE1_1, CLAVE2_1),
CONSTRAINT MAYUSCULAS CHECK (VARIO = UPPER(VARIO))
)
CREATE TABLE T2
(
CLAVE1_2 NUMBER(5), 
CLAVE2_2 VARCHAR2(10),
CLAVE3_2 NUMBER(3),
VARIO VARCHAR2(30),
CONSTRAINT PK_T2 PRIMARY KEY (CLAVE1_2, CLAVE2_2, CLAVE2_3),
CONSTRAINT NUM_MENOR CHECK (CLAVE3_2 < 100)
)

---------------------------------------------------------------------------

CREATE OR REPLACE VIEW PRIMERA AS SELECT * FROM ARTICULOS WHERE CATEGORIA = 'Primera'  WITH CHECK OPTION;

-----------------------------------------------------------------------------------------------------------

CREATE VIEW SALARIO AS SELECT APELLIDO, SALARIO*1.15 SALARIO_BRUTO, DEPT_NO FROM EMPLE

---------------------------------------------------------------------------------------------

CREATE VIEW MAX_SALARIO AS 
SELECT * FROM EMPLE
WHERE (DEPT_NO, SALARIO) IN (SELECT DEPT_NO, MAX(SALARIO) FROM EMPLE GROUP BY DEPT_NO);

------------------------------------------------------------------------------------------

--TEMA 8

CREATE OR REPLACE PROCEDURE EJER1 (NUMDEPT NUMBER)
AS
V_REG DEPART%ROWTYPE;
NUMEMPLE NUMBER(2);
BEGIN

SELECT * INTO V_REG FROM DEPART WHERE DEPT_NO = NUMDEPT;

SELECT COUNT(*) INTO NUMEMPLE FROM EMPLE WHERE DEPT_NO=NUMDEPT;

DBMS_OUTPUT.PUT_LINE('Datos del departamento: '|| V_REG.DEPT_NO ||' '||V_REG.DNOMBRE||' '||V_REG.LOC);

DBMS_OUTPUT.PUT_LINE(''|| NUMEMPLE);
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Ninguna fila encontrada');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error');
END EJER1;

--------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO_2 (NUMDEPT NUMBER)
AS
V_ANALISTA NUMBER(2);
V_EMPLEADO NUMBER(2);
BEGIN
SELECT COUNT(*) INTO V_ANALISTA FROM EMPLE WHERE OFICIO='ANALISTA' AND DEPT_NO=NUMDEPT;
SELECT COUNT(*) INTO V_EMPLEADO FROM EMPLE WHERE OFICIO='EMPLEADO' AND DEPT_NO=NUMDEPT;

DBMS_OUTPUT.PUT_LINE('El numero de analistas es: '||V_ANALISTA);
DBMS_OUTPUT.PUT_LINE('El numero de empleados es: '||V_EMPLEADO);

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error');

END EJERCICIO_2;

--------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO_3 (FAB VARCHAR2)
AS
COD_FAB NUMBER(2);
NUM_PED NUMBER(3);
FACT NUMBER(5,1);
BEGIN

SELECT COD_FABRICANTE INTO COD_FAB FROM FABRICANTES WHERE NOMBRE=FAB;

SELECT COUNT(*) INTO NUM_PED FROM PEDIDOS WHERE COD_FABRICANTE=COD_FAB;

SELECT SUM(UNIDADES_PEDIDAS*PRECIO_VENTA) INTO FACT FROM ARTICULOS A, PEDIDOS P WHERE A.ARTICULO=P.ARTICULO AND A.COD_FABRICANTE=P.COD_FABRICANTE AND A.PESO=P.PESO AND A.CATEGORIA=P.CATEGORIA AND A.COD_FABRICANTE=COD_FAB GROUP BY A.COD_FABRICANTE;

DBMS_OUTPUT.PUT_LINE('Numero de pedidos: '||NUM_PED);
DBMS_OUTPUT.PUT_LINE('Facturacion: '||FACT);

EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE ('Dato no encontrado');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('Demasiadas filas');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error general');
END EJERCICIO_3;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO4 (CODIGO NUMBER)
AS
PROFESOR NUMBER(2);
PERSONAL NUMBER(2);
BEGIN
SELECT COUNT(*) INTO PROFESOR FROM PROFESORES WHERE COD_CENTRO=CODIGO;
SELECT COUNT(*) INTO PERSONAL FROM PERSONAL WHERE COD_CENTRO=CODIGO;
DBMS_OUTPUT.PUT_LINE('PROFESORES:'||PROFESOR);
DBMS_OUTPUT.PUT_LINE('PERSONAL:'||PERSONAL);
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO EXISTE EL CENTRO');
END EJERCICIO4;

---------------------------------------------------------------------------

CREATE TABLE FACTURACION
AS
SELECT F.COD_FABRICANTE, NOMBRE, PAIS, SUM(UNIDADES_PEDIDAS*PRECIO_VENTA) FACT, SUM(UNIDADES_PEDIDAS) UNIDADES
FROM FABRICANTES F, PEDIDOS P, ARTICULOS A
WHERE F.COD_FABRICANTE=A.COD_FABRICANTE AND A.ARTICULO=P.ARTICULO AND A.COD_FABRICANTE=P.COD_FABRICANTE AND A.PESO=P.PESO AND A.CATEGORIA=P.CATEGORIA
GROUP BY F.COD_FABRICANTE, NOMBRE, PAIS

SELECT * FROM FACTURACION;
DESCRIBE FABRICANTES;


CREATE OR REPLACE PROCEDURE EJERCICIO5 (N VARCHAR2, ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2, UNI NUMBER)
AS
V_FACT NUMBER(6,2);
V_UNI NUMBER(4);
BEGIN

INSERT INTO PEDIDOS VALUES (N, ART, COD, PES, CAT, SYSDATE, UNI);

SELECT SUM(UNIDADES_PEDIDAS*PRECIO_VENTA) INTO V_FACT
FROM ARTICULOS A, PEDIDOS P WHERE A.ARTICULO=P.ARTICULO AND A.COD_FABRICANTE=P.COD_FABRICANTE AND A.PESO=P.PESO AND A.CATEGORIA=P.CATEGORIA AND P.COD_FABRICANTE=COD GROUP BY P.COD_FABRICANTE;

SELECT SUM(UNIDADES_PEDIDAS) INTO V_UNI FROM PEDIDOS WHERE COD_FABRICANTE=COD GROUP BY COD_FABRICANTE;

UPDATE FACTURACION
SET FACT=V_FACT, UNIDADES=V_UNI
WHERE COD_FABRICANTE=COD;

EXCEPTION
WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('No hay datos');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error');

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO6 (ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2, PV NUMBER, PC NUMBER, EXIST NUMBER)
AS
V_UNI_PED NUMBER(3);
V_UNI_VEN NUMBER(3);
BEGIN
INSERT INTO ARTICULOS VALUES (ART, COD, PES, CAT, PV, PC, EXIST);
INSERT INTO PEDIDOS SELECT NIF, ART, COD, PES, CAT, SYSDATE, 5 FROM TIENDAS;
INSERT INTO VENTAS SELECT NIF, ART, COD, PES, CAT, SYSDATE, 5 FROM TIENDAS;
SELECT SUM(UNIDADES_PEDIDAS) INTO V_UNI_PED FROM PEDIDOS WHERE ARTICULO=ART AND COD_FABRICANTE= COD AND PESO=PES AND CATEGORIA=CAT;
SELECT SUM(UNIDADES_VENDIDAS) INTO V_UNI_VEN FROM VENTAS WHERE ARTICULO=ART AND COD_FABRICANTE= COD AND PESO=PES AND CATEGORIA=CAT;
DBMS_OUTPUT.PUT_LINE('Las unidades pedidas son:'||V_UNI_PED);
DBMS_OUTPUT.PUT_LINE('Las unidades vendidas son:'||V_UNI_VEN);

EXCEPTION

WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO HAY DATOS');

WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR');

END EJERCICIO6;

-----------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO7(EMP NUMBER, APE VARCHAR2, OFI VARCHAR2, D NUMBER, FECHA DATE, DEPT NUMBER, COM NUMBER DEFAULT 0)
AS
V_SALARIO NUMBER(6,2);
V_NUM NUMBER(1);
BEGIN
SELECT COUNT(*) INTO V_NUM FROM DEPART WHERE DEPT_NO=DEPT;

IF (V_NUM=1 AND COM>=0) THEN
SELECT TRUNC(AVG(SALARIO)*1.03) INTO V_SALARIO FROM EMPLE WHERE DEPT_NO=DEPT;
INSERT INTO EMPLE VALUES (EMP, APE, OFI, D, FECHA, V_SALARIO, COM, DEPT);
ELSE
DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO NO EXISTE');
END IF;

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO NO EXISTE');
END EJERCICIO7;DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO NO EXISTE');
END IF;

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('EL DEPARTAMENTO NO EXISTE');
END EJERCICIO7;


-- TEMA 9

CREATE OR REPLACE PROCEDURE EJERCICIO_9_1 (COD NUMBER, DN NUMBER, APE VARCHAR2, ESP VARCHAR2)
AS
NUM NUMBER(2);
CLAVE NUMBER(2);
BEGIN
SELECT COUNT(*) INTO NUM FROM CENTROS WHERE COD_CENTRO = COD;
SELECT COUNT(*) INTO CLAVE FROM PROFESORES WHERE DNI = DN;
IF (NUM=1 AND CLAVE=0) THEN
INSERT INTO PROFESORES VALUES (COD, DN, APE, ESP);
DBMS_OUTPUT.PUT_LINE('PROFESOR INSERTADO');
ELSE
DBMS_OUTPUT.PUT_LINE('EL CENTRO NO EXISTE O EL DNI SE REPITE');
END IF;
EXCEPTION
WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE('ERROR GENERAL');
END EJERCICIO_9_1;

--------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO_9_2(EMP NUMBER, APE VARCHAR2, OFI VARCHAR2, D NUMBER, FECHA DATE, SAL NUMBER, COM NUMBER, DEP NUMBER)
AS
V_DIR NUMBER(2);
V_DEPT_NO NUMBER(2);
V_SUM_SAL NUMBER(7);
BEGIN
IF(SAL>0) THEN 
SELECT COUNT(*) INTO V_DIR FROM EMPLE WHERE EMP_NO=D;
SELECT COUNT(*) INTO V_DEPT_NO FROM DEPART WHERE DEPT_NO=DEP;

IF(V_DIR=1 AND V_DEPT_NO=1 AND SAL >0) THEN 
INSERT INTO EMPLE VALUES (EMP, APE, OFI, D, FECHA, SAL, COM, DEP);
DBMS_OUTPUT.PUT_LINE('EMPLEADO INSERTADO');
SELECT SUM(SALARIO) INTO V_SUM_SAL FROM EMPLE WHERE DEPT_NO=DEP GROUP BY DEPT_NO;
DBMS_OUTPUT.PUT_LINE('EL GASTO EN SALARIO DEL DEPARTAMENTO '||DEP||' ES '||V_SUM_SAL);

ELSE
DBMS_OUTPUT.PUT_LINE('EL JEFE O EL DEPARTAMENTO NO EXISTEN');
END IF;

ELSE
DBMS_OUTPUT.PUT_LINE('EL SALARIO ES NEGATIVO O CERO');
END IF;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR');
END EJERCICIO_9_2;

------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO_9_3 (N VARCHAR2, ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2, UNID NUMBER, FECHA DATE DEFAULT SYSDATE)
AS
V_ART NUMBER(2);
V_NIF NUMBER(2);
V_EXIST NUMBER(4);
V_UNI NUMBER(3);
BEGIN
SELECT COUNT(*) INTO V_ART FROM ARTICULOS WHERE ARTICULO=ART AND PESO=PES AND COD_FABRICANTE = COD AND CATEGORIA=CAT;
SELECT COUNT(*) INTO V_NIF FROM TIENDAS WHERE NIF=N;
IF (V_ART=1 AND V_NIF=1) THEN
SELECT EXISTENCIAS INTO V_EXIST FROM ARTICULOS WHERE ARTICULO=ART AND PESO=PES AND COD_FABRICANTE=COD AND CATEGORIA=CAT;
IF (V_EXIST < UNID) THEN
V_UNI:=TRUNC(V_EXIST*0.2);
ELSE	
V_UNI:=UNID;
END IF;
INSERT INTO PEDIDOS VALUES (N, ART, COD, PES, CAT, FECHA, V_UNI);
UPDATE ARTICULOS SET EXISTENCIAS = EXISTENCIAS-V_UNI WHERE ARTICULO=ART AND PESO=PES AND COD_FABRICANTE = COD AND CATEGORIA=CAT;
ELSE
DBMS_OUTPUT.PUT_LINE('EL NIF O EL ARTICULO NO EXISTEN');
END IF;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR');
END EJERCICIO_9_3;

-----------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE FACT(F1 DATE, F2 DATE)
AS
FACT_PEDIDOS NUMBER(8,2);
FACT_VENTAS NUMBER(8,2);
BEGIN
SELECT SUM(UNIDADES_PEDIDAS*PRECIO_VENTA) INTO FACT_PEDIDOS FROM ARTICULOS A, PEDIDOS P WHERE A.ARTICULO=P.ARTICULO AND A.COD_FABRICANTE=P.COD_FABRICANTE AND A.PESO=P.PESO AND A.CATEGORIA=P.CATEGORIA AND FECHA_PEDIDO BETWEEN F1 AND F2;

SELECT SUM(UNIDADES_VENDIDAS*PRECIO_VENTA) INTO FACT_VENTAS FROM ARTICULOS A, VENTAS V WHERE A.ARTICULO=V.ARTICULO AND A.COD_FABRICANTE=V.COD_FABRICANTE AND A.PESO=V.PESO AND A.CATEGORIA=V.CATEGORIA AND FECHA_venta BETWEEN F1 AND F2;

DBMS_OUTPUT.PUT_LINE('Facturacion de pedidos: '||FACT_PEDIDOS);
DBMS_OUTPUT.PUT_LINE('Facturacion de ventas: '||FACT_VENTAS);

EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No hay filas');
END FACT;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJER_6_PROC(N_DEPT NUMBER)
AS
V NUMBER(2);
BEGIN
V:=EJER_6(N_DEPT);
DBMS_OUTPUT.PUT_LINE('El numero de empleados de '||N_DEPT||' es '||V);

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR');
END EJER_6_PROC;

-----------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION EJER_7(ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2)
RETURN NUMBER 
AS
V_UNI_PEDIDAS NUMBER(4);
BEGIN
SELECT SUM(UNIDADES_PEDIDAS) INTO V_UNI_PEDIDAS FROM PEDIDOS WHERE ARTICULO = ART AND COD_FABRICANTE=COD
AND PESO=PES AND CATEGORIA=CAT;
RETURN V_UNI_PEDIDAS;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('SIN DATOS');
END EJER_7;

------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJER_8(ART VARCHAR, COD NUMBER, PES NUMBER, CAT VARCHAR2)
AS
V_UNI_PED NUMBER(4);
BEGIN
V_UNI_PED:=EJER_7 (ART, COD, PES, CAT);

UPDATE ARTICULOS SET EXISTENCIAS=EXISTENCIAS-V_UNI_PED
WHERE ARTICULO=ART AND COD_FABRICANTE = COD AND PESO=PES AND CATEGORIA=CAT;

EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE ('NO HAY DATOS');

END EJER_8;

-----------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJER_9 (ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2)
AS

PROCEDURE FACT (ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2)

AS
V_FACT NUMBER(7,2);
BEGIN
SELECT SUM(UNIDADES_PEDIDAS*PRECIO_VENTA) INTO V_FACT FROM ARTICULOS A, PEDIDOS P WHERE A.ARTICULO=P.ARTICULO AND A.COD_FABRICANTE=P.COD_FABRICANTE AND A.PESO=P.PESO AND A.CATEGORIA=P.CATEGORIA and A.ARTICULO=ART AND A.COD_FABRICANTE=COD AND A.PESO=PES AND A.CATEGORIA=CAT;
DBMS_OUTPUT.PUT_LINE(V_FACT);
END FACT;

PROCEDURE NUM_PED(ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2)
AS
V_NUM_PED NUMBER(2);
BEGIN
SELECT COUNT(*) INTO V_NUM_PED FROM PEDIDOS WHERE ARTICULO=ART AND COD_FABRICANTE=COD AND PESO=PES AND CATEGORIA=CAT;
DBMS_OUTPUT.PUT_LINE(V_NUM_PED);
END NUM_PED;

BEGIN

FACT (ART, COD, PES, CAT);
NUM_PED (ART, COD, PES, CAT);

END EJER_9;

BEGIN EJER_9('Macarrones', 20, 1, 'Primera');END;

-------------------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE EJER_10(DEPT NUMBER)
AS
V_SUM_SALARIO NUMBER(7,2);
V_NUM_EMPLE NUMBER(2);

FUNCTION NUM_EMPLE(DEPT NUMBER)
RETURN NUMBER
AS
V_NUM NUMBER(2);

BEGIN
SELECT COUNT(*) INTO V_NUM FROM EMPLE WHERE DEPT_NO=DEPT;
RETURN V_NUM;
END NUM_EMPLE;

FUNCTION SUM_SALARIO(DEPT NUMBER)
RETURN NUMBER
AS
V_SALARIO NUMBER(7,2);

BEGIN

SELECT SUM(SALARIO) INTO V_SALARIO FROM EMPLE WHERE DEPT_NO=DEPT;
RETURN V_SALARIO;

END SUM_SALARIO;

BEGIN 

V_SUM_SALARIO:= SUM_SALARIO(DEPT);
V_NUM_EMPLE:= NUM_EMPLE(DEPT);
DBMS_OUTPUT.PUT_LINE(V_SUM_SALARIO);
DBMS_OUTPUT.PUT_LINE(V_NUM_EMPLE);

END EJER_10;

BEGIN EJER_10(10);
END;

-----------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE CURSORES
AS
CURSOR C1 IS SELECT APELLIDO, OFICIO, SALARIO FROM EMPLE;
V_REG C1%ROWTYPE;

BEGIN 
OPEN C1;
FETCH C1 INTO V_REG;
WHILE C1%FOUND LOOP
DBMS_OUTPUT.PUT_LINE (V_REG.APELLIDO ||' '||V_REG.OFICIO||' '||V_REG.SALARIO);
FETCH C1 INTO V_REG;		
END LOOP;
CLOSE C1;
END CURSORES;

BEGIN CURSORES; END;

-------------------------------------------------------------------------------------------------

--CORRECCION EXAMEN 2 EVALUACION  | 1 EXAMEN 

--1.Crea una tienda nueva e inserta pedidos a esa tienda de artï¿½culos de categorï¿½a primera.

INSERT INTO TIENDAS VALUES ('9999-F', 'TIENDAEXAMEN', 'A', 'A', 'A', 1);

INSERT INTO PEDIDOS SELECT '9999-F', ARTICULO, COD_FABRICANTE, PESO, CATEGORIA, SYSDATE, 3
FROM ARTICULOS WHERE CATEGORIA = 'Primera';

--2. Elimina los empleados que ganan el salario mï¿½ximo en su departamento

DELETE FROM EMPLE
WHERE (DEPT_NO, SALARIO) IN (SELECT DEPT_NO, MAX(SALARIO) FROM EMPLE GROUP BY DEPT_NO);

DELETE FROM EMPLE E
WHERE SALARIO = (SELECT MAX(SALARIO) FROM EMPLE WHERE DEPT_NO=E.DEPT_NO GROUP BY DEPT_NO);

--3. Actualiza el salario de los empleados que ganan mï¿½s de la media en su departamento (subconsulta correlacionada) el valor nuevo serï¿½ el salario rebajado en 2%.

UPDATE EMPLE E
SET SALARIO = SALARIO*0.98
WHERE SALARIO > (SELECT AVG(SALARIO) FROM EMPLE WHERE DEPT_NO=E.DEPT_NO);


--4. Crea un nuevo artï¿½culo del fabricante LU. Despuï¿½s inserta pedidos de ese artï¿½culo a todas las tiendas de Madrid.

INSERT INTO ARTICULOS 
SELECT 'Galletas', COD_FABRICANTE, 1, 'Primera', 1, 0.5, 100
FROM FABRICANTES WHERE NOMBRE = 'LU';


INSERT INTO PEDIDOS
SELECT NIF, 'Galletas', COD_FABRICANTE, 1, 'Primera', SYSDATE, 5
FROM FABRICANTES F, TIENDAS T WHERE F.NOMBRE = 'LU' AND PROVINCIA = 'MADRID';


--5. Crea una tabla que tenga: PK (2 columnas), restricciones CHECK, NOT NULL y UNIQUE. Estas restricciones deben tener nombre.

CREATE TABLE PRUEBA3 (
COL1 VARCHAR2(10),
COL2 VARCHAR2(10),
COL3 NUMBER(2) CONSTRAINT COL3POS CHECK (COL3 > 0),
COL4 DATE CONSTRAINT COL4NONULL NOT NULL,
COL5 VARCHAR2(15) CONSTRAINT COL5UNIQ UNIQUE,
CONSTRAINT PKKJH PRIMARY KEY (COL1, COL2)
);

--6.	Crea las siguientes tablas:
--a.	Medico (DNI (pk),  nombre, apellidos, especialidad)
--b.	Paciente (Num_p (pk), nombre, apellidos)
--c.	Visitas (tabla de intersecciï¿½n de Medico y Paciente. Ademï¿½s de los campos de FK, la PK serï¿½ el conjunto de todos los campos de FK, tambiï¿½n tendremos: fecha, hora.

CREATE TABLE MEDICOS
(
DNI VARCHAR2(10) CONSTRAINT PKMED PRIMARY KEY,
NOMBRE VARCHAR2(15),
APELLIDOS VARCHAR2(25),
ESPECIALIDAD VARCHAR2(20)
)

CREATE TABLE PACIENTES
(
NUM_P NUMBER(5) CONSTRAINT PKPAC PRIMARY KEY,
NOMBRE VARCHAR2(15),
APELLIDOS VARCHAR2(25))

CREATE TABLE VISITAS
(
DNI VARCHAR2(10) CONSTRAINT FKMED REFERENCES MEDICOS, 
NUM_P NUMBER(5) CONSTRAINT FKPAC REFERENCES PACIENTES,
FECHA DATE,
HORA VARCHAR2(5),
CONSTRAINT PKVISITAS PRIMARY KEY (DNI, NUM_P, FECHA, HORA)
)

--8. Crea una vista que recoja: Nombre y apellidos del mï¿½dico, del paciente, y fecha y hora de la visita.

CREATE OR REPLACE VIEW EJER9 
AS
SELECT M.NOMBRE NMED, M.APELLIDOS AMED, P.NOMBRE NPAC, P.APELLIDOS APAC, FECHA, HORA
FROM MEDICOS M, PACIENTES P, VISITAS V
WHERE M.DNI=V.DNI AND P.NUM_P=V.NUM_P;


--CORRECCION EXAMEN 2 EVALUACION | 2 EXAMEN

--1.- Crea un procedimiento que a travÃ©s del cod_centro de un centro nos muestra:

--a) Todos los datos del centro.
--b) El nÃºmero de profesores que tiene ese centro.

CREATE OR REPLACE PROCEDURE EJERCICIO1_CENTRO(CODCENTRO1 NUMBER)

AS

V_REG CENTROS%ROWTYPE;
NUMPROF NUMBER(2);

BEGIN

SELECT * INTO V_REG FROM CENTROS WHERE COD_CENTRO = CODCENTRO1;

SELECT COUNT(*) INTO NUMPROF FROM PROFESORES WHERE COD_CENTRO = CODCENTRO1;

DBMS_OUTPUT.PUT_LINE(V_REG.COD_CENTRO||' '||V_REG.TIPO_CENTRO||' '||
V_REG.NOMBRE||' '||V_REG.DIRECCION||' '||V_REG.TELEFONO||' '||V_REG.NUM_PLAZAS);

DBMS_OUTPUT.PUT_LINE('EL NUMERO DE PROFESORES ES: '|| NUMPROF);

EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('EL CODIGO DEL CENTRO NO SE ENCONTRO');
END EJERCICIO1_CENTRO;




--2.- Crea un procedimiento que muestre la facturaciÃ³n de los artÃ­culos de un fabricante concreto.
--Este recibe como parÃ¡metro el cÃ³digo del fabricante.

CREATE OR REPLACE PROCEDURE EJ_FACTURACION_2(COD_FABRIC NUMBER)

AS

VAR_FACT NUMBER(6);

BEGIN

SELECT SUM(UNIDADES_VENDIDAS*PRECIO_VENTA) INTO VAR_FACT FROM ARTICULOS A, VENTAS V 
WHERE A.ARTICULO=V.ARTICULO AND A.COD_FABRICANTE=V.COD_FABRICANTE 
AND A.COD_FABRICANTE=COD_FABRIC AND A.PESO=V.PESO AND A.CATEGORIA=V.CATEGORIA 
GROUP BY A.COD_FABRICANTE;

DBMS_OUTPUT.PUT_LINE('EL FABRICANTE A FACTURADO '|| VAR_FACT);

EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO NO LOCALIZADO');

END EJ_FACTURACION_2;



--3.- Crea un procedimiento que recibe los datos de un pedido y realiza las siguientes acciones:

--a) Comprueba que el artÃ­culo existe en la tabla artÃ­culos.

--b) Comprueba que la tienda existe en la tabla tiendas.

--c) Si las unidades del pedido es superior a la de la venta, sÃ³lo asigna al pedido el 20% de las existencias.

--d) La fecha de pedido es la actual.

--e) Una vez insertado el pedido resta las unidades pedidas a las existencias del artÃ­culo.


CREATE OR REPLACE PROCEDURE EJERCICIO_2_3(N VARCHAR2, ART VARCHAR2, COD NUMBER, 
PES NUMBER, CAT VARCHAR2, UNID NUMBER, FECHA DATE DEFAULT SYSDATE)

AS

V_ART NUMBER(2);
V_NIF NUMBER(2);
V_EXIST NUMBER(4);
V_UNI NUMBER(3);

BEGIN

SELECT COUNT(*) INTO V_ART FROM ARTICULOS WHERE ARTICULO=ART 
AND PESO=PES AND COD_FABRICANTE=COD AND CATEGORIA=CAT;

SELECT COUNT(*) INTO V_NIF FROM TIENDAS WHERE NIF=N;

IF (V_ART=1 AND V_NIF=1) THEN

SELECT EXISTENCIAS INTO V_EXIST FROM ARTICULOS WHERE ARTICULO=ART 
AND PESO=PES AND COD_FABRICANTE=COD AND CATEGORIA=CAT;

IF (V_EXIST<UNID) THEN
V_UNI:=TRUNC(V_EXIST*0.2);

ELSE

V_UNI:=UNID;
END IF;

INSERT INTO PEDIDOS VALUES (N, ART, COD, PES, CAT, FECHA, V_UNI);
UPDATE ARTICULOS SET EXISTENCIAS = EXISTENCIAS-V_UNI WHERE ARTICULO=ART
AND PESO=PES AND COD_FABRICANTE = COD AND CATEGORIA=CAT;

ELSE

DBMS_OUTPUT.PUT_LINE('LAS EXISTENCIAS DEL ARTICULO NO EXISTEN');
END IF;

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR');
END EJERCICIO_2_3;


--TEMA 10

CREATE TABLE EMPLE_H AS SELECT * FROM EMPLE;
TRUNCATE TABLE EMPLE_H;

CREATE OR REPLACE PROCEDURE EJER_REF_10_1(DEP NUMBER)
AS
BEGIN
INSERT INTO EMPLE_H SELECT * FROM EMPLE WHERE DEPT_NO=DEP;
DELETE FROM EMPLE WHERE DEPT_NO=DEP;
EXCEPTION
WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE('ERROR');
END EJER_REF_10_1;

BEGIN EJER_REF_10_1(10); END;

------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJER_REF_10_2(DNOM VARCHAR2)
AS
V_SAL_MED NUMBER(6,2);
V_DEPT_NO NUMBER(2);

CURSOR C1 (DEP NUMBER, SAL NUMBER) IS SELECT * FROM EMPLE
WHERE DEPT_NO=DEP AND SALARIO < SAL FOR UPDATE;

BEGIN
SELECT DEPT_NO INTO V_DEPT_NO FROM DEPART WHERE DNOMBRE=DNOM;
SELECT TRUNC (AVG(SALARIO),2) INTO V_SAL_MED
FROM EMPLE WHERE DEPT_NO=(SELECT DEPT_NO FROM DEPART WHERE DNOMBRE=DNOM);

FOR V_REG IN C1 (V_DEPT_NO, V_SAL_MED) LOOP
INSERT INTO EMPLE_H VALUES (V_REG.EMP_NO, V_REG.APELLIDO, V_REG.OFICIO, V_REG.DIR, V_REG.FECHA_ALT, V_REG.SALARIO, V_REG.COMISION, V_REG.DEPT_NO);
UPDATE EMPLE SET DEPT_NO=(SELECT DEPT_NO FROM DEPART WHERE DNOMBRE='VENTAS')
WHERE CURRENT OF C1;
END LOOP;

EXCEPTION 
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO HAY DATOS');

WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('DEMASIADOS DATOS');

END EJER_REF_10_2;

BEGIN EJER_REF_10_2 (10); END;

------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJER_REF_10_5 (COD NUMBER, PVP NUMBER, PCT NUMBER)
AS
CURSOR C1(COD_FAB NUMBER) IS SELECT * FROM ARTICULOS WHERE COD_FABRICANTE=COD_FAB FOR UPDATE;
V_PVP NUMBER(4,2);
V_COD NUMBER(1);
NO_FAB EXCEPTION;
PVP_NEG EXCEPTION;
PCT_NEG EXCEPTION;

BEGIN 
SELECT COUNT(*) INTO V_COD FROM FABRICANTES WHERE COD_FABRICANTE=COD;

IF V_COD=0 THEN RAISE NO_FAB; END IF;
IF PVP<0 THEN RAISE PVP_NEG; END IF;
IF PCT<0 THEN RAISE PCT_NEG; END IF;

FOR V_REG IN C1(COD) LOOP
V_PVP:=LEAST(PVP, V_REG.PRECIO_VENTA*(1+PCT/100));
UPDATE ARTICULOS SET PRECIO_VENTA=V_PVP WHERE CURRENT OF C1;
END LOOP;

EXCEPTION
WHEN NO_FAB THEN DBMS_OUTPUT.PUT_LINE('NO EXISTE EL FABRICANTE');
WHEN PVP_NEG THEN DBMS_OUTPUT.PUT_LINE('PVP NEGATIVO');
WHEN PCT_NEG THEN DBMS_OUTPUT.PUT_LINE('PCT NEGATIVO');

END EJER_REF_10_5;

-------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJER_REF_10_4
AS
CURSOR C1 IS SELECT APELLIDO, OFICIO, SALARIO, DEPT_NO FROM EMPLE ORDER BY DEPT_NO;
DEP EMPLE.DEPT_NO%TYPE;
I NUMBER(2); 
BEGIN
I:=1;
DEP:=-1;

FOR V_REG IN C1 LOOP

IF (V_REG.DEPT_NO <> DEP) THEN 
DEP := V_REG.DEPT_NO;
I:=1;
END IF;

IF I <=3 THEN 
DBMS_OUTPUT.PUT_LINE(RPAD(V_REG.APELLIDO,15)||' '||RPAD(V_REG.SALARIO,15)||' '||V_REG.DEPT_NO);
I:=I+1;
END IF;

END LOOP;

END EJERCICIO_4;

BEGIN EJERCICIO_4; END;

---------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJER_REF_10_5 (COD NUMBER, PVP NUMBER, PCT NUMBER)
AS
CURSOR C1(COD_FAB NUMBER) IS SELECT * FROM ARTICULOS WHERE COD_FABRICANTE=COD_FAB FOR UPDATE;
V_PVP NUMBER(4,2);
V_COD NUMBER(1);
NO_FAB EXCEPTION;
PVP_NEG EXCEPTION;
PCT_NEG EXCEPTION;

BEGIN
SELECT COUNT(*) INTO V_COD FROM FABRICANTES WHERE COD_FABRICANTE=COD;

IF V_COD=0 THEN RAISE NO_FAB; END IF;
IF PVP<0 THEN RAISE PVP_NEG; END IF;
IF PCT<0 THEN RAISE PCT_NEG; END IF;

FOR V_REG IN C1(COD) LOOP
 V_PVP:=LEAST(PVP, V_REG.PRECIO_VENTA*(1+PCT/100));
 UPDATE ARTICULOS SET PRECIO_VENTA=V_PVP WHERE CURRENT OF C1;
END LOOP;

EXCEPTION
WHEN NO_FAB THEN DBMS_OUTPUT.PUT_LINE ('NO EXISTE EL FABRICANTE');
WHEN PVP_NEG THEN DBMS_OUTPUT.PUT_LINE ('PVP NEGATIVO');
WHEN PCT_NEG THEN DBMS_OUTPUT.PUT_LINE ('PCT NEGATIVO');

END EJER_REF_10_5;

BEGIN EJER_REF_10_5(10, 0.2, 20); END;

---------------------------------------------------------------------------------

CREATE TABLE T_ARTICULOS
(ARTICULOS VARCHAR2(20),
COD_FABRICANTE NUMBER(3),
PESO NUMBER(3),
CATEGORIA VARCHAR2(10),
UNIDADES_VENDIDAS NUMBER(4),
UNIDADES_PEDIDAS NUMBER(4));

CREATE OR REPLACE PROCEDURE EJER_REF_10_6(ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2, F1 DATE, F2 DATE)
AS
UNIP NUMBER(4);
UNIV NUMBER(4);
BEGIN
SELECT NVL(SUM(UNIDADES_PEDIDAS),0) INTO UNIP FROM PEDIDOS
WHERE ARTICULO=ART AND COD_FABRICANTE=COD AND PESO=PES AND CATEGORIA=CAT 
AND FECHA_PEDIDO BETWEEN F1 AND F2;

SELECT NVL(SUM(UNIDADES_VENDIDAS),0) INTO UNIV FROM VENTAS
WHERE ARTICULO=ART AND COD_FABRICANTE=COD AND PESO=PES AND CATEGORIA=CAT 
AND FECHA_VENTA BETWEEN F1 AND F2;

INSERT INTO T_ARTICULOS VALUES (ART, COD, PES, CAT, UNIV, UNIP);
EXCEPTION
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('ERROR GENERAL');
END EJER_REF_10_6;

BEGIN EJER_REF_10_6('Macarrones', 20, 1, 'Primera', '01/01/1990', '31/12/2006');
end;

--------------------------------------------------------------------------------------------

CREATE TABLE T_DEPART
(DEPT_NO NUMBER(3),
SALARIO_MEDIO NUMBER(7,2),
SALARIO_MAXIMO NUMBER(5),
SALARIO_MINIMO NUMBER(5),
NUM_EMPLE NUMBER(3));

CREATE OR REPLACE PROCEDURE EJER_REF_10_7(DNOM VARCHAR2)
AS
V_EXISTE NUMBER(1);
CURSOR C1(NOM VARCHAR2) IS SELECT D.DEPT_NO, TRUNC(AVG(SALARIO),2) MED, 
MAX(SALARIO) MAXIM, MIN(SALARIO) MINIM, COUNT(*) NUM
FROM EMPLE E, DEPART D WHERE E.DEPT_NO=D.DEPT_NO AND DNOMBRE=NOM GROUP BY D.DEPT_NO;
NO_EXISTE EXCEPTION;
BEGIN
SELECT COUNT(*) INTO V_EXISTE FROM DEPART WHERE DNOMBRE=DNOM;
IF V_EXISTE= 0 THEN 
 RAISE NO_EXISTE;
END IF;
FOR V_REG IN C1(DNOM) LOOP
 INSERT INTO T_DEPART VALUES(V_REG.DEPT_NO, V_REG.MED, V_REG.MAXIM, V_REG.MINIM, V_REG.NUM);
END LOOP;
EXCEPTION
WHEN NO_EXISTE THEN DBMS_OUTPUT.PUT_LINE('NO EXISTE EL DEPARTAMENTO');
WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR');
END EJER_REF_10_7;

-------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE REFUERZO8 (EMP NUMBER, AP VARCHAR2, OFI VARCHAR2, D NUMBER, FECHA DATE, SAL NUMBER, COMI NUMBER, DEP NUMBER)
AS
V_MEDIA NUMBER(7,2);
V_MAXIMO NUMBER(5);
V_MINIMO NUMBER(5);
V_NUMERO NUMBER(3);


BEGIN

INSERT INTO EMPLE VALUES (EMP, AP, OFI, D, FECHA, SAL, COMI, DEP);

SELECT AVG(SALARIO+NVL(COMISION,0)),MAX(SALARIO+NVL(COMISION,0)),MIN(SALARIO+NVL(COMISION,0)), COUNT(*) 
INTO V_MEDIA, V_MAXIMO, V_MINIMO, V_NUMERO FROM EMPLE 
WHERE DEPT_NO = DEP;

DELETE FROM T_DEPART WHERE DEPT_NO=DEP;
INSERT INTO T_DEPART VALUES (DEP, V_MEDIA, V_MAXIMO, V_MINIMO, V_NUMERO);

END REFUERZO8;

-------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO9
AS
CURSOR C1 IS SELECT ARTICULO, COD_FABRICANTE, PESO,CATEGORIA FROM ARTICULOS;
CURSOR C2(ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2) IS SELECT NVL(COUNT(*),0) NUMERO_DE_PEDIDOS FROM PEDIDOS WHERE ARTICULO = ART AND COD_FABRICANTE = COD AND PESO = PES
AND CATEGORIA = CAT;

BEGIN

FOR V_REG1 IN C1 LOOP
 FOR V_REG2 IN C2(V_REG1.ARTICULO, V_REG1.COD_FABRICANTE, V_REG1.PESO, V_REG1.CATEGORIA) LOOP
   DBMS_OUTPUT.PUT_LINE(RPAD(V_REG1.ARTICULO, 15)||' '||V_REG2.NUMERO_DE_PEDIDOS);
 END LOOP;
END LOOP;

END EJERCICIO9;

12.	Crea un procedimiento que muestre por cada uno de los centros el dinero gastado en salarios de sus empleados (Centros y Personal)

CREATE OR REPLACE PROCEDURE EJER_REF_10_12
AS
CURSOR C1 IS SELECT C.COD_CENTRO,C.NOMBRE, SUM(SALARIO) SUMA FROM CENTROS C, PERSONAL P WHERE C.COD_CENTRO=P.COD_CENTRO
GROUP BY C.COD_CENTRO,C.NOMBRE;
BEGIN

FOR VREG IN C1 LOOP
 DBMS_OUTPUT.PUT_LINE(RPAD(VREG.COD_CENTRO,5)||' '||RPAD(VREG.NOMBRE,20)||' '||VREG.SUMA);
END LOOP;

END EJER_REF_10_12;

BEGIN EJER_REF_10_12; END;

--------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO_3
AS
CURSOR C1 IS SELECT APELLIDO, SALARIO FROM EMPLE ORDER BY SALARIO DESC;
I NUMBER(2);
BEGIN
I:=1;
FOR V_REG IN C1 LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(V_REG.APELLIDO,15)||' '||V_REG.SALARIO);
I:=I+1;
EXIT WHEN I > 5;
END LOOP;
END EJERCICIO_3;
-----------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE EJERCICIO_4
AS
CURSOR C1 IS SELECT APELLIDO, OFICIO, SALARIO FROM EMPLE ORDER BY OFICIO, SALARIO;
OFI EMPLE.OFICIO%TYPE;
I NUMBER(2); 
BEGIN
I:=1;
OFI:='*';

FOR V_REG IN C1 LOOP

IF (V_REG.OFICIO <> OFI) THEN 
OFI := V_REG.OFICIO;
I:=1;
END IF;

IF I <=2 THEN 
DBMS_OUTPUT.PUT_LINE(RPAD(V_REG.APELLIDO,15)||' '||RPAD(V_REG.OFICIO,15)||' '||V_REG.SALARIO);
I:=I+1;
END IF;

END LOOP;

END EJERCICIO_4;

BEGIN EJERCICIO_4; END;
--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE EJERCICIO_4_B
AS
CURSOR C1 IS SELECT DISTINCT OFICIO FROM EMPLE ORDER BY OFICIO;
CURSOR C2(OFI VARCHAR2) IS SELECT APELLIDO, OFICIO, SALARIO FROM EMPLE WHERE OFICIO=OFI
 ORDER BY SALARIO; 

BEGIN
FOR V_REG1 IN C1 LOOP
 
 FOR V_REG2 IN C2(V_REG1.OFICIO) LOOP

   DBMS_OUTPUT.PUT_LINE(RPAD(V_REG2.APELLIDO,15)||' '||RPAD(V_REG2.OFICIO,15)||' '||V_REG2.SALARIO);
   EXIT WHEN C2%ROWCOUNT=2;

 END LOOP;

END LOOP;

END EJERCICIO_4_B;

BEGIN EJERCICIO_4_B; END;
----------------------------------------------------------------------------------------------------------------------------------
5.-

Desarrolla un procedimiento que permita insertar nuevos departamentos segï¿½n las siguientes especificaciones:
ï¿½ Se pasarï¿½ al procedimiento el nombre del departamento y la localidad.
ï¿½ El procedimiento insertarï¿½ la fila nueva asignando como nï¿½mero de departamento la decena siguiente al nï¿½mero mayor de la tabla.
ï¿½ Se incluirï¿½ la gestiï¿½n de posibles errores.

 

CREATE OR REPLACE PROCEDURE EJERC_10_5(P_NOM VARCHAR2, P_LOC VARCHAR2)
AS
V_DEPT_NO DEPART.DEPT_NO%TYPE;
BEGIN
SELECT TRUNC(MAX(DEPT_NO),-1)+10 INTO V_DEPT_NO FROM DEPART;

INSERT INTO DEPART VALUES (V_DEPT_NO, P_NOM, P_LOC);

EXCEPTION

WHEN OTHERS THEN

DBMS_OUTPUT.PUT_LINE('ERROR GENERAL');
END EJERC_10_5;


-------------------------------------------------------------------------------------------------------------------------
6.- Codifica un procedimiento que reciba como parï¿½metros un nï¿½mero de departamento, un importe y un porcentaje;
y que suba el salario a todos los empleados del departamento indicado en la llamada. La subida serï¿½ el porcentaje 
o el importe que se indica en la llamada (el que sea mï¿½s beneficioso para el empleado en cada caso).


CREATE OR REPLACE PROCEDURE EJERCICIO_1O_6 (P_DEPT_NO NUMBER, P_IMPORTE NUMBER, P_PCT NUMBER)
AS
V_INC NUMBER(6,2);
V_PCT NUMBER(6,2);
CURSOR C1 IS SELECT EMP_NO, APELLIDO, OFICIO, SALARIO, DEPT_NO FROM EMPLE 
WHERE DEPT_NO=P_DEPT_NO FOR UPDATE;
BEGIN

FOR V_REG IN C1 LOOP
V_PCT:= V_REG.SALARIO*(P_PCT/100);
V_INC:= GREATEST(V_PCT,P_IMPORTE);
UPDATE EMPLE SET SALARIO=SALARIO + V_INC WHERE CURRENT OF C1;
END LOOP;

EXCEPTION

WHEN OTHERS THEN 
 DBMS_OUTPUT.PUT_LINE('ERROR');

END EJERCICIO_1O_6;


-- CON ROWID

CREATE OR REPLACE PROCEDURE EJERCICIO_1O_6 (P_DEPT_NO NUMBER, P_IMPORTE NUMBER, P_PCT NUMBER)
AS
V_INC NUMBER(6,2);
V_PCT NUMBER(6,2);
CURSOR C1 IS SELECT ROWID, EMP_NO, APELLIDO, OFICIO, SALARIO, DEPT_NO 
FROM EMPLE WHERE DEPT_NO=P_DEPT_NO;
BEGIN

FOR V_REG IN C1 LOOP
V_PCT:= V_REG.SALARIO*(P_PCT/100);
V_INC:= GREATEST(V_PCT,P_IMPORTE);
UPDATE EMPLE SET SALARIO=SALARIO + V_INC WHERE ROWID=V_REG.ROWID;
END LOOP;

EXCEPTION

WHEN OTHERS THEN 
 DBMS_OUTPUT.PUT_LINE('ERROR');

END EJERCICIO_1O_6;
-----------------------------------------------------------------------------------------------------------------------
7.- Escribe un procedimiento que suba el sueldo de todos los empleados que ganen menos que el salario medio de su oficio. 
La subida serï¿½ del 50 por 100 de la diferencia entre el salario del empleado y la media de su oficio. Se deberï¿½ hacer 
que la transacciï¿½n no se quede a medias, y se gestionarï¿½n los posibles errores.

CREATE OR REPLACE PROCEDURE EJERCICIO_10_7
AS
V_INC NUMBER(6,2);
V_SAL_MEDIO NUMBER(6,2);
CURSOR C1 IS SELECT ROWID, EMP_NO, APELLIDO, OFICIO, SALARIO, DEPT_NO FROM EMPLE E 
WHERE SALARIO < (SELECT AVG(SALARIO) FROM EMPLE WHERE OFICIO=E.OFICIO);
BEGIN
FOR V_REG IN C1 LOOP
SELECT AVG(SALARIO) INTO V_SAL_MEDIO FROM EMPLE WHERE OFICIO=V_REG.OFICIO;
UPDATE EMPLE SET SALARIO = SALARIO + (V_SAL_MEDIO - SALARIO)/2 WHERE ROWID=V_REG.ROWID;
END LOOP;
EXCEPTION
WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('ERROR');
END EJERCICIO_10_7;

BEGIN EJERCICIO_10_7; END;


-----------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE EJERCICIO_10_8
AS
CURSOR C1 IS SELECT EMP_NO, APELLIDO, FECHA_ALT, OFICIO, SALARIO, NVL(COMISION,0) COM, DEPT_NO FROM EMPLE ORDER BY APELLIDO;
V_TRIENIOS NUMBER(3);
V_COMPLEMENTO NUMBER(6,2);
V_TOTAL NUMBER(6,2);
BEGIN
FOR V_REG IN C1 LOOP
SELECT TRUNC((TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(FECHA_ALT,'YYYY'))/365/3)*50 INTO V_TRIENIOS FROM EMPLE E WHERE EMP_NO=v_reg.EMP_NO;
SELECT COUNT(*) INTO V_COMPLEMENTO FROM EMPLE E WHERE DIR=V_REG.EMP_NO;
V_COMPLEMENTO:=V_COMPLEMENTO*100;
V_TOTAL:=V_REG.SALARIO+V_REG.COM+V_TRIENIOS+V_COMPLEMENTO;
DBMS_OUTPUT.PUT_LINE('*************************************');
DBMS_OUTPUT.PUT_LINE(RPAD('Liquidacion del empleado:',35)||V_REG.APELLIDO);
DBMS_OUTPUT.PUT_LINE(RPAD('Departamento:',35)||V_REG.DEPT_NO);
DBMS_OUTPUT.PUT_LINE(RPAD('Oficio:',35)||V_REG.OFICIO);
DBMS_OUTPUT.PUT_LINE(RPAD('Salario:',35)||V_REG.SALARIO);
DBMS_OUTPUT.PUT_LINE(RPAD('Trienios:',35)||V_TRIENIOS);
DBMS_OUTPUT.PUT_LINE(RPAD('Complemento de responsabilidad:',35)||V_COMPLEMENTO);
DBMS_OUTPUT.PUT_LINE(RPAD('Comision:',35)||V_REG.COM);
DBMS_OUTPUT.PUT_LINE('*************************************');
DBMS_OUTPUT.PUT_LINE(RPAD('Total a liquidar:',35)||V_TOTAL);
DBMS_OUTPUT.PUT_LINE('*************************************');
END LOOP;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error General');
END EJERCICIO_10_8;

--TEMA 11

CREATE OR REPLACE TRIGGER EJERR1
INSTEAD OF INSERT OR UPDATE OR DELETE ON VISTAR1
FOR EACH ROW

DECLARE

BEGIN
   IF INSERTING THEN 
      INSERT INTO EMPLE (EMP_NO, APELLIDO, OFICIO, SALARIO, DEPT_NO) VALUES (:NEW.EMP_NO, :NEW.APELLIDO, :NEW.OFICIO, :NEW.SALARIO, :NEW.DEPT_NO);
   ELSIF DELETING THEN 
      DELETE FROM EMPLE WHERE EMP_NO = :OLD.EMP_NO;
   ELSIF UPDATING THEN
      UPDATE EMPLE SET EMP_NO = :NEW.EMP_NO, APELLIDO = :NEW.APELLIDO, OFICIO = :NEW.OFICIO, SALARIO = :NEW.SALARIO, DEPT_NO = :NEW.DEPT_NO WHERE EMP_NO = :OLD.EMP_NO;
   ELSE
      RAISE_APPLICATION_ERROR(-20001,'ERROR');
   END IF;

END EJERR1;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE EJR_5

AS
   PROCEDURE B (ART VARCHAR2, CODF NUMBER, PES NUMBER, CAT VARCHAR2);
   PROCEDURE C (ART VARCHAR2, CODF NUMBER, PES NUMBER, CAT VARCHAR2, PV NUMBER, PC NUMBER, EXIST NUMBER);
   PROCEDURE D (ART VARCHAR2, CODF NUMBER, PES NUMBER, CAT VARCHAR2, PV NUMBER, PC NUMBER, EXIST NUMBER);

END EJR_5;

CREATE OR REPLACE PACKAGE BODY EJR_5

AS

PROCEDURE B (ART VARCHAR2, CODF NUMBER, PES NUMBER, CAT VARCHAR2)

AS

BEGIN
   INSERT INTO H_ARTICULOS SELECT * FROM ARTICULOS WHERE ARTICULO = ART AND COD_FABRICANTE = CODF AND PESO = PES AND CATEGORIA = CAT;

   INSERT INTO H_PEDIDOS SELECT * FROM PEDIDOS WHERE ARTICULO = ART AND COD_FABRICANTE = CODF AND PESO = PES AND CATEGORIA = CAT;

   INSERT INTO H_VENTAS SELECT * FROM VENTAS WHERE ARTICULO = ART AND COD_FABRICANTE = CODF AND PESO = PES AND CATEGORIA = CAT;

   DELETE FROM ARTICULOS WHERE ARTICULO = ART AND COD_FABRICANTE = CODF AND PESO = PES AND CATEGORIA = CAT;

END B;

PROCEDURE C (ART VARCHAR2, CODF NUMBER, PES NUMBER, CAT VARCHAR2, PV NUMBER, PC NUMBER, EXIST NUMBER)

AS
   V_FAB NUMBER;
   FAB_NO EXCEPTION;
   PV_PC EXCEPTION;

BEGIN
   SELECT COUNT(*) INTO V_FAB FROM ARTICULOS WHERE COD_FABRICANTE = CODF;

   IF (V_FAB = 0) THEN
      RAISE FAB_NO;
   END IF;

   IF (PV <= PC) THEN
      RAISE PV_PC;
   END IF;

   INSERT INTO H_ARTICULOS
   VALUES(ART, CODF, PES, CAT, PV, PC, EXIST);

EXCEPTION
   WHEN FAB_NO THEN
      DBMS_OUTPUT.PUT_LINE('EL FABRICANTE NO EXISTE');
   WHEN PV_PC THEN
      DBMS_OUTPUT.PUT_LINE('EL PRECIO DE VENTA NO PUEDE SER MENOR QUE EL DE COSTE');   

END C;

PROCEDURE D (ART VARCHAR2, CODF NUMBER, PES NUMBER, CAT VARCHAR2, PV NUMBER, PC NUMBER, EXIST NUMBER)

AS

BEGIN
   UPDATE ARTICULOS 
   SET PRECIO_VENTA = PV, PRECIO_COSTO = PC, EXISTENCIAS = EXIST
   WHERE ARTICULO = ART AND COD_FABRICANTE = CODF AND PESO = PES AND CATEGORIA = CAT;  

END D;

END EJR_5;

--------------------------------------------------------------------------------------------------------------------

CREATE TABLE AUDITAR_ARTICULOS
(ARTICULO VARCHAR2(40),
COD_FABRICANTE NUMBER(6),
PESO NUMBER(6),
CATEGORIA VARCHAR2(20),
USUARIO VARCHAR2(20),
FECHA DATE,
TIPO_MODIFICACION VARCHAR2(20));

CREATE OR REPLACE TRIGGER EJER_REF_11_6
BEFORE DELETE OR INSERT OR UPDATE ON ARTICULOS
FOR EACH ROW
BEGIN
IF INSERTING THEN
INSERT INTO AUDITAR_ARTICULOS VALUES (:NEW.ARTICULO, :NEW.COD_FABRICANTE, :NEW.PESO, :NEW.CATEGORIA, USER, SYSDATE, 'INSERTAR');
ELSIF DELETING THEN
INSERT INTO AUDITAR_ARTICULOS VALUES (:OLD.ARTICULO, :OLD.COD_FABRICANTE, :OLD.PESO, :OLD.CATEGORIA, USER, SYSDATE, 'ELIMINAR');
ELSIF UPDATING THEN
INSERT INTO AUDITAR_ARTICULOS VALUES (:OLD.ARTICULO||'*'||:NEW.ARTICULO, :OLD.COD_FABRICANTE||'*'||:NEW.COD_FABRICANTE, :OLD.PESO||'*'||:NEW.PESO, :OLD.CATEGORIA||'*'||:NEW.CATEGORIA, USER, SYSDATE,'MODIFICAR');
ELSE
DBMS_OUTPUT.PUT_LINE('ERROR'
);
END IF;
END EJER_REF_11_6;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER EJER_REF_11_7_a
BEFORE INSERT ON NUEVOS
FOR EACH ROW
BEGIN
INSERT INTO ALUM VALUES (:NEW.NOMBRE, :NEW.EDAD, :NEW.LOCALIDAD);
END EJER_REF_11_7_a;

CREATE OR REPLACE TRIGGER EJER_REF_11_7_b
BEFORE DELETE ON ALUM
FOR EACH ROW
BEGIN
INSERT INTO ANTIGUOS VALUES(:OLD.NOMBRE, :OLD.EDAD, :OLD.LOCALIDAD);
DELETE FROM NUEVOS WHERE NOMBRE=:OLD.NOMBRE AND EDAD=:OLD.EDAD AND LOCALIDAD=:OLD.LOCALIDAD;
END EJER_REF_11_7_b;

--------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER EJER_REF_11_11
BEFORE INSERT OR DELETE OR UPDATE ON PROFESORES
FOR EACH ROW
BEGIN
IF INSERTING THEN
INSERT INTO PERSONAL (COD_CENTRO, DNI, APELLIDOS, FUNCION)VALUES
(:NEW.COD_CENTRO, :NEW.DNI, :NEW.APELLIDOS, 'PROFESOR');
ELSIF DELETING THEN
DELETE FROM PERSONAL WHERE DNI=:OLD.DNI;
ELSIF DELETING THEN
UPDATE PERSONAL SET COD_CENTRO=:NEW.COD_CENTRO, DNI=:NEW.DNI, APELLIDOS=:NEW.APELLIDOS WHERE DNI=:OLD.DNI;
ELSE
DBMS_OUTPUT.PUT_LINE('ERROR');
END IF;
END EJER_REF_11_11;

----------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER EJER_REF_11_12
BEFORE INSERT OR UPDATE OR DELETE ON PERSONAL
FOR EACH ROW
WHEN (NEW.FUNCION='PROFESOR' OR OLD.FUNCION='PROFESOR')
BEGIN	

IF INSERTING THEN
INSERT INTO PROFESORES (COD_CENTRO, DNI, APELLIDOS)
VALUES (:NEW.COD_CENTRO, :NEW.DNI, :NEW.APELLIDOS);
ELSIF DELETING THEN
DELETE FROM PROFESORES WHERE DNI=:OLD.DNI;
ELSIF UPDATING THEN
UPDATE PROFESORES SET COD_CENTRO=:NEW.COD_CENTRO, DNI=:NEW.DNI, APELLIDOS=:NEW.APELLIDOS WHERE DNI=:OLD.DNI;
ELSE
DBMS_OUTPUT.PUT_LINE('ERROR');
END IF;

END EJER_REF_11_12;


--EXAMEN 3 EVALUACION | 1 EXAMEN


--1. Crea un procedimiento que muestra los coches de todos de todos los fabricantes,
--es decir, se muestra cada fabricante y a continuaciÃ³n los vehÃ­culos de ese fabricante.
--(cursores anidados con parametros)



CREATE OR REPLACE PROCEDURE EJERCICIO1_EXAMEN1_3BBDD
AS
CURSOR C1 IS

SELECT COD_FAB, FABRICANTE FROM FABRICANTES_C;
CURSOR C2(I_COD_FAB NUMBER) IS
SELECT MATRICULA,MODELO,MOTOR,COMBUSTIBLE,FECHA_MAT FROM COCHES WHERE COD_FAB = I_COD_FAB;

BEGIN

FOR F_C1 IN C1 LOOP
FOR F_C2 IN C2(F_C1.COD_FAB) LOOP
DBMS_OUTPUT.PUT_LINE(F_C1.FABRICANTE ||' | '|| F_C2.MODELO || ' | '|| F_C2.MATRICULA ||' | ' || F_C2.MOTOR || ' | ' || F_C2.COMBUSTIBLE || ' | ' || F_C2.FECHA_MAT);
END LOOP;END LOOP;

END EJERCICIO1_EXAMEN1_3BBDD;

BEGIN EJERCICIO1_EXAMEN1_3BBDD; END;






--2.Crea un procedimiento que introduzca coches en la tabla coches. Se comprueba que el
--fabricante existe. Si no existe no permite realizar la inserciÃ³n. AdemÃ¡s mostrarÃ¡ por
--pantalla un listado de los coches del fabricante del coche insertado--


CREATE OR REPLACE PROCEDURE EJERCICIO2_EXAMEN1_3BBDD

(MATRICULA VARCHAR2,MODELO VARCHAR2,MOTOR VARCHAR2, COMBUSTIBLE VARCHAR2, FECHA_MAT DATE, COD_FAB NUMBER)
AS
V_COD NUMBER(2);
NO_FAB EXCEPTION;

BEGIN
SELECT COUNT(*) INTO V_COD FROM FABRICANTES_C WHERE COD_FAB = COD_FABRI;
IF (V_COD <> 1) THEN
RAISE NO_FAB;

ELSE

INSERT INTO COCHES VALUES(MATRICULA,MODELO,MOTOR,COMBUSTIBLE,FECHA_MAT,COD_FABRI);
END IF;

SELECT MODELO FROM COCHES WHERE COD_FAB = COD_FABRI;
EXCEPTION
WHEN NO_FAB THEN
DBMS_OUTPUT.PUT_LINE('EL FABRICANTE NO EXISTE');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR');
END EJERCICIO2_EXAMEN1_3BBDD;

BEGIN EJERCICIO2_EXAMEN1_3BBDD; END;





--3. Crea un disipadro sobre la tabla coches.--


CREATE TABLE veh(

MATRICULA VARCHAR2(7),
FECHA DATE,
OPERACION VARCHAR2(10)
)

CREATE OR REPLACE TRIGGER EJERCICIO3_EXAMEN1_3BBDD
BEFORE INSERT OR DELETE ON COCHES
FOR EACH ROW
BEGIN
IF INSERTING THEN
INSERT INTO veh VALUES (:NEW.MATRICULA, SYSDATE, 'COMPRAR');
ELSIF DELETING THEN
INSERT INTO veh VALUES (:OLD.MATRICULA, SYSDATE,'VENTA');
END IF;
END EJERCICIO3_EXAMEN1_3BBDD;



--EXAMEN 3 EVALUACION | 2 EXAMEN

--2. Ejercicio PAQUETE:


CREATE OR REPLACE PACKAGE EJERCICIO2_PACKAGE

AS

TYPE T_TABLA_CLIENTES IS TABLE OF CLIENTES%ROWTYPE INDEX BY BINARY_INTEGER;


PROCEDURE VER_CLIENTES;

PROCEDURE INSERTAR_PEDIDO (D VARCHAR2, ID1 NUMBER DEFAULT NULL, ID2 NUMBER DEFAULT NULL, ID3 NUMBER DEFAULT NULL, ID4 NUMBER DEFAULT NULL, ID5 NUMBER DEFAULT NULL);

PROCEDURE BORRAR_PEDIDO (IDPED NUMBER);

END EJERCICIO2_PACKAGE;


CREATE OR REPLACE PACKAGE BODY EJERCICIO2_PACKAGE

AS

TAB_CLIENTES T_TABLA_CLIENTES;



PROCEDURE VER_CLIENTES

AS
I NUMBER(2);

CURSOR C1 IS SELECT * FROM CLIENTES;
 
BEGIN

TAB_CLIENTES.DELETE;I:=0;
FOR V_REG IN C1 LOOP

TAB_CLIENTES(I):=V_REG;I:=I+1;
END LOOP;

I:=TAB_CLIENTES.FIRST;

WHILE I IS NOT NULL LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(TAB_CLIENTES(I).DNI, 20)|| RPAD(TAB_CLIENTES(I).APELLIDOS, 20) ||TAB_CLIENTES(I).CIUDAD);

I:=TAB_CLIENTES.NEXT(I);

END LOOP;
END VER_CLIENTES;




PROCEDURE INSERTAR_PEDIDO (D VARCHAR2, ID1 NUMBER DEFAULT NULL, ID2 NUMBER DEFAULT NULL, ID3 NUMBER DEFAULT NULL, ID4 NUMBER DEFAULT NULL, ID5 NUMBER DEFAULT NULL)

AS

V_MAXPED NUMBER(20,4);
I NUMBER(20,4);
SUMA1 NUMBER(20,4);
SUMA2 NUMBER(20,4);
SUMA3 NUMBER(20,4);
SUMA4 NUMBER(20,4);
SUMA5 NUMBER(20,4);


BEGIN
SELECT MAX(ID_PEDIDO) INTO V_MAXPED FROM PEDIDOS WHERE DNI=D;
SELECT SUM(PRECIO) INTO SUMA1 FROM PRODUCTOS WHERE ID_PRODUCTO=ID1;
SELECT SUM(PRECIO) INTO SUMA2 FROM PRODUCTOS WHERE ID_PRODUCTO=ID2;
SELECT SUM(PRECIO) INTO SUMA3 FROM PRODUCTOS WHERE ID_PRODUCTO=ID3;
SELECT SUM(PRECIO) INTO SUMA4 FROM PRODUCTOS WHERE ID_PRODUCTO=ID4;
SELECT SUM(PRECIO) INTO SUMA5 FROM PRODUCTOS WHERE ID_PRODUCTO=ID5;
 

INSERT INTO PEDIDOS VALUES (V_MAXPED+1, SYSDATE, D);

IF ID1 IS NOT NULL 
THEN

INSERT INTO DETALLES VALUES (V_MAXPED+1, ID1, SUMA1);

END IF;

IF ID2 IS NOT NULL 
THEN
INSERT INTO DETALLES VALUES (V_MAXPED+1, ID2, SUMA2);

END IF;

IF ID3 IS NOT NULL 
THEN
INSERT INTO DETALLES VALUES (V_MAXPED+1, ID3, SUMA3);

END IF;

IF ID4 IS NOT NULL 
THEN
INSERT INTO DETALLES VALUES (V_MAXPED+1, ID4, SUMA4);
END IF;

IF ID5 IS NOT NULL 
THEN
INSERT INTO DETALLES VALUES (V_MAXPED+1, ID5, SUMA5);
END IF;

END INSERTAR_PEDIDO;




PROCEDURE BORRAR_PEDIDO (IDPED NUMBER)
AS
 
 
BEGIN
 
DELETE FROM DETALLES WHERE ID_PEDIDO=IDPED;
DELETE FROM PEDIDOS WHERE ID_PEDIDO=IDPED;
 
END BORRAR_PEDIDO;



 
END EJERCICIO2_PACKAGE;


BEGIN EJERCICIO2_PACKAGE.VER_CLIENTES;END;
BEGIN EJERCICIO2_PACKAGE.BORRAR_PEDIDO(7);END;
BEGIN EJERCICIO2_PACKAGE.INSERTAR_PEDIDO('12345678L',1,2,3,4);END;


SELECT * FROM CLIENTES
SELECT * FROM DETALLES
SELECT * FROM PEDIDOS
SELECT * FROM PRODUCTOS


--3. Ejercicio TRIGGUER:


CREATE OR REPLACE VIEW EJERCICIO1_VICTOR AS SELECT ID_PEDIDO, FECHA, DNI, APELLIDOS, CIUDAD 
FROM PEDIDOS NATURAL JOIN CLIENTES


CREATE OR REPLACE TRIGGER EJERCICIO1_TRIGGUER
INSTEAD OF INSERT OR UPDATE OR DELETE ON EJERCICIO1_VICTOR

FOR EACH ROW
DECLARE
V_CLIENTE NUMBER(20);

BEGIN


IF INSERTING THEN

SELECT COUNT(*) INTO V_CLIENTE FROM CLIENTES WHERE APELLIDOS = :NEW.APELLIDOS AND DNI = :NEW.DNI;

IF V_CLIENTE > 0 THEN
INSERT INTO PEDIDOS VALUES (:NEW.ID_PEDIDO, :NEW.FECHA, :NEW.DNI);
END IF;

ELSIF DELETING THEN
DELETE FROM PEDIDOS WHERE ID_PEDIDO = :OLD.ID_PEDIDO;
ELSIF UPDATING ('FECHA DEL PEDIDO')
THEN
UPDATE PEDIDOS SET FECHA = :NEW.FECHA WHERE ID_PEDIDO = :OLD.ID_PEDIDO;
END IF;

END EJERCICIO1_TRIGGUER;


INSERT INTO VISTA1 VALUES (6, SYSDATE, '32187944F', 'GALLEGO', 'MADRID');
DELETE FROM VISTA1 WHERE ID_PEDIDO = 6
UPDATE PEDIDOS SET FECHA = '27/04/15' WHERE ID_PEDIDO = 5

--EJEMPLO OBJETOS

CREATE OR REPLACE TYPE EMPLE_OBJ AS OBJECT
(EMP_NO NUMBER(4),
APELLIDO VARCHAR2(10),
OFICIO VARCHAR2(10),
DIR NUMBER(4),
FECHA_ALT DATE,
SALARIO NUMBER(7),
COMISION NUMBER(7),
DEPT_NO NUMBER(2),
MEMBER PROCEDURE MOSTRAR_EMPLE,
MAP MEMBER FUNCTION POR_SALARIO RETURN NUMBER
);

CREATE OR REPLACE TYPE BODY EMPLE_OBJ
AS
------------------------------------
MEMBER PROCEDURE MOSTRAR_EMPLE
AS
BEGIN
DBMS_OUTPUT.PUT_LINE(RPAD(EMP_NO,5)||' '||RPAD(APELLIDO,15)||' '||RPAD(OFICIO,15)||' '||RPAD(SALARIO,10)||' '||RPAD(DEPT_NO,5));
END MOSTRAR_EMPLE;
-------------------------------------
MAP MEMBER FUNCTION POR_SALARIO RETURN NUMBER
AS
BEGIN
RETURN SELF.SALARIO;
END POR_SALARIO;

END;


DECLARE
O_EMPLE_1 EMPLE_OBJ:=EMPLE_OBJ(1111,'MARTINEZ','ANALISTA',2222,SYSDATE,1500,0,10);
O_EMPLE_2 EMPLE_OBJ:=EMPLE_OBJ(2222,'LOPEZ','DIRECTOR',3333, SYSDATE,2000,0,10);
BEGIN
O_EMPLE_1.MOSTRAR_EMPLE;
O_EMPLE_2.MOSTRAR_EMPLE;

IF O_EMPLE_2.POR_SALARIO > O_EMPLE_1.POR_SALARIO THEN
 DBMS_OUTPUT.PUT_LINE('EL EMPLEADO 2 GANA MAS QUE EL EMPLEADO 1');
END IF;
END;















