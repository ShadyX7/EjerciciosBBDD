
-- 2. CREAR TABLAS CON EJERCICIO 1:

DROP TABLE USUARIOS CASCADE CONSTRAINTS;
DROP TABLE TITULOS CASCADE CONSTRAINTS;
DROP TABLE EJEMPLARES CASCADE CONSTRAINTS;
DROP TABLE LIBROS CASCADE CONSTRAINTS;
DROP TABLE PRESTAMOS CASCADE CONSTRAINTS;


CREATE TABLE USUARIOS
(DNI VARCHAR2(10) CONSTRAINT PK_USUARIOS PRIMARY KEY,
NOMBRE VARCHAR2(20),
APELLIDOS VARCHAR2(30),
MAIL VARCHAR2(20),
FECHA_NAC DATE);


CREATE TABLE PRESTAMOS
(ID_PRESTAMOS VARCHAR2(10),
FECHA_FIN DATE),
FECHA_INI DATE),

CONSTRAINT FK_USUARIOS FOREIGN KEY (DNI) REFERENCES USUARIOS (DNI),
CONSTRAINT FK_TITULOS FOREIGN KEY (ID_TITULO) REFERENCES TITULOS (ID_TITULO);



CREATE TABLE TITULOS
(ID_TITULO VARCHAR2(10) CONSTRAINT PK_TITULOS PRIMARY KEY);

CREATE TABLE LIBROS
(ID_LIBRO VARCHAR2(10),
AUTOR VARCHAR2(10),
NOMBRE VARCHAR2(10),

CONSTRAINT FK_USUARIOS FOREIGN KEY (DNI) REFERENCES USUARIOS (DNI),
CONSTRAINT FK_TITULOS FOREIGN KEY (ID_TITULO) REFERENCES TITULOS (ID_TITULO);



CREATE TABLE EJEMPLARES
(ID_EJEMPLAR VARCHAR2(10),
AUTOR VARCHAR2(10),
LIBRO VARCHAR2(10),
REFERENCIA VARCHAR2(20),

CONSTRAINT FK_USUARIOS FOREIGN KEY (DNI) REFERENCES USUARIOS (DNI),
CONSTRAINT FK_TITULOS FOREIGN KEY (ID_TITULO) REFERENCES TITULOS (ID_TITULO);



--4 ARTICULO CON MAS PEDIDOS:

SELECT ARTICULO, COD_FABRICANTE, PESO, CATEGORIA FROM PEDIDOS
GROUP BY ARTICULO, COD_FABRICANTE, PESO, CATEGORIA
HAVING COUNT (*) = (SELECT MAX(COUNT(*)) FROM PEDIDOS
GROUP BY ARTICULO, COD_FABRICANTE, PESO, CATEGORIA);




--6 INSERTAR NUEVO PROFESOR EN CENTRO QUE MENOS PROFESORES TENGA:

INSERT INTO PROFESORES
SELECT COD_CENTRO, 123, 'Romero, Miguel', 'INFORM√ÅTICA'
FROM PROFESORES
GROUP BY COD_CENTRO
HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM PROFESORES GROUP BY COD_CENTRO);


--7 CREA PEDIDOS DE LOS ARTICULOS QUE MENOS PEDIDOS TENGAN:

CREATE OR REPLACE FUNCTION EJER_7(ART VARCHAR2, COD NUMBER, PES NUMBER, CAT VARCHAR2)
RETURN NUMBER 
AS
V_UNI_PEDIDAS NUMBER(5);
BEGIN
SELECT SUM(UNIDADES_PEDIDAS) INTO V_UNI_PEDIDAS 
FROM PEDIDOS WHERE ARTICULO = ART AND COD_FABRICANTE=COD
AND PESO=PES AND CATEGORIA=CAT;
RETURN V_UNI_PEDIDAS;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO HAY DATOS');
END EJER_7;


--8 PAQUETE: 
BEGIN PACK8.VER_MATRICULA;END;
BEGIN PACK8.BORRAR_MATRICULA ;END;
BEGIN PACK8.INSERTAR_MATRICULA ;END;
SELECT * FROM CURSOS
SELECT * FROM ALUMNOS
SELECT * FROM MATRICULA

CREATE OR REPLACE PACKAGE PACK8
AS
TYPE T_TABLE_CURSOS IS TABLE OF CURSOS%ROWTYPE INDEX BY BINARY_INTEGER;
PROCEDURE VER_MATRICULA (CODIGO VARCHAR(10),MATRICULA NUMBER(50),CICLO VARCHAR2(60));
PROCEDURE INSERTAR_MATRICULA (DNI VARCHAR2(10), CODIGO VARCHAR2(10), CURSO NUMBER(2), AGNO VARCHAR2));
PROCEDURE BORRAR_MATRICULA (DNI VARCHAR2(10) ,CODIGO VARCHAR2(10), CURSO NUMBER(2), AGNO VARCHAR2(5));

CREATE OR REPLACE PACKAGE BODY PACK8
AS
TABLE_CURSOS T_TABLE_CURSOS;

PROCEDURE VER_MATRICULA
AS
I NUMBER(2);
CURSOR C1 IS SELECT * FROM CURSOS;
BEGIN
TABLE_CURSOS.DELETE;
I:=0;
FOR X_L IN C1 LOOP
TABLE_CURSOS(I):=X_L;
I:=I+1;
END LOOP;
I:=TABLE_CURSOS.FIRST;
WHILE I IS NOT NULL LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(TABLE_CURSOS(I).CODIGO, 10)|| RPAD(TABLE_CURSOS(I).CURSO, 2) ||TABLE_CURSOS(I).CICLO);
I:=TABLE_CURSOS.NEXT(I);
END LOOP;
END VER_MATRICULA;


PROCEDURE INSERT_MATRICULA (DNI,MATRICULA)
AS
INSERT INTO MATRICULA VALUES (DNI, MATRICULA);
UPDATE MATRICULAS SET DNI = DNI WHERE MATRICULA=MATRICULA AND DNI=DNI;
ELSE
DBMS_OUTPUT.PUT_LINE('El DNI o MATRICULA');
END IF;

END INSERT_MATRICULA;


PROCEDURE BORRAR_MATRICULA (CODIGO, DNI)
AS 
BEGIN
 
DELETE FROM MATRICULA WHERE CODIGO=CODIGO;
DELETE FROM MATRICULA WHERE DNI=DNI;

END BORRAR_MATRICULA;
END PACK8;
